{"id":"01g8n89w6bewmfpfjf38esrs4k","add_time_ms":1658570731723,"icon":"book","type":"doc","title":"Menus and toolbars in wxWidgets","_id":"19","content":"A menubar is one of the most visible parts of the GUI application. It is a group of commands located in various menus. While in console applications you had to remember all those arcane commands, here we have most of the commands grouped into logical parts. There are accepted standards that further reduce the amount of time spending to learn a new application. To implement a menubar in wxWidgets we need to have three classes: a wxMenuBar, a wxMenu, and a wxMenuItem.\n\nSimple menu example\n\nCreating a menubar in wxWidgets is very simple.\n\nmenu.h\n\n#include <wx/wx.h>\n\n#include <wx/menu.h>\n\nclass SimpleMenu : public wxFrame\n\n{\n\npublic:\n\n    SimpleMenu(const wxString& title);\n\n    void OnQuit(wxCommandEvent& event);\n\n    wxMenuBar *menubar;\n\n    wxMenu *file;\n\n};\n\nmenu.cpp\n\n#include \"menu.h\"\n\n\nSimpleMenu::SimpleMenu(const wxString& title)\n\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(280, 180))\n\n{\n\n  menubar = new wxMenuBar;\n\n  file = new wxMenu;\n\n  file->Append(wxID_EXIT, wxT(\"&Quit\"));\n\n  menubar->Append(file, wxT(\"&File\"));\n\n  SetMenuBar(menubar);\n\n  Connect(wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED,\n\n      wxCommandEventHandler(SimpleMenu::OnQuit));\n\n  Centre();\n\n}\n\nvoid SimpleMenu::OnQuit(wxCommandEvent& WXUNUSED(event))\n\n{\n\n  Close(true);\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"menu.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    SimpleMenu *menu = new SimpleMenu(wxT(\"Simple Menu\"));\n\n    menu->Show(true);\n\n    return true;\n\n}\n\nmenubar = new wxMenuBar;\n\nFirst we create a menubar object.\n\nfile = new wxMenu;\n\nNext we create a menu object.\n\nfile->Append(wxID_EXIT, wxT(\"&Quit\"));\n\nWe append a menu item into the menu object. The first parameter is the id of the menu item. The second parameter is the name of the menu item. Here we did not create a wxMenuItem explicitly. It was created by the Append method behind the scenes. Later on, we will create a wxMenuItem manually.\n\nmenubar->Append(file, wxT(\"&File\"));\n\nSetMenuBar(menubar);\n\nAfter that, we append a menu into the menubar. The & character creates an accelerator key. The character that follows the & is underlined. This way the menu is accessible via the Alt+F shortcut. In the end, we call the SetMenuBar method. This method belongs to the wxFrame widget. It sets up the menubar.\n\nSimle menu example\n\nFigure: Simple menu example\n\nSubmenus\n\nEach menu can also have a submenu. This way we can group similar commands into groups. For example we can place commands that hide or show various toolbars like personal bar, address bar, status bar, or navigation bar into a submenu called toolbars. Within a menu, we can separate commands with a separator. It is a simple line. It is common practice to separate commands like new, open, save from commands like print, print preview with a single separator. In our example we will see, how we can create submenus and menu separators.\n\nmenu.h\n\n#include <wx/wx.h>\n\n#include <wx/menu.h>\n\nclass SubMenu : public wxFrame\n\n{\n\npublic:\n\n  SubMenu(const wxString& title);\n\n  void OnQuit(wxCommandEvent & event);\n\n  wxMenuBar *menubar;\n\n  wxMenu *file;\n\n  wxMenu *imp;\n\n  wxMenuItem *quit;\n\n};\n\nmenu.cpp\n\n#include \"menu.h\"\n\n\nSubMenu::SubMenu(const wxString& title)\n\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(280, 180))\n\n{\n\n  menubar = new wxMenuBar;\n\n  file = new wxMenu;\n\n  file->Append(wxID_ANY, wxT(\"&New\"));\n\n  file->Append(wxID_ANY, wxT(\"&Open\"));\n\n  file->Append(wxID_ANY, wxT(\"&Save\"));\n\n  file->AppendSeparator();\n\n  imp = new wxMenu;\n\n  imp->Append(wxID_ANY, wxT(\"Import newsfeed list...\"));\n\n  imp->Append(wxID_ANY, wxT(\"Import bookmarks...\"));\n\n  imp->Append(wxID_ANY, wxT(\"Import mail...\"));\n\n  file->AppendSubMenu(imp, wxT(\"I&mport\"));\n\n  quit = new wxMenuItem(file, wxID_EXIT, wxT(\"&Quit\\tCtrl+W\"));\n\n  file->Append(quit);\n\n  menubar->Append(file, wxT(\"&File\"));\n\n  SetMenuBar(menubar);\n\n  Connect(wxID_EXIT, wxEVT_COMMAND_MENU_SELECTED, \n\n      wxCommandEventHandler(SubMenu::OnQuit));\n\n  Centre();\n\n}\n\nvoid SubMenu::OnQuit(wxCommandEvent& WXUNUSED(event))\n\n{\n\n  Close(true);\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"menu.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    SubMenu *smenu = new SubMenu(wxT(\"Submenu\"));\n\n    smenu->Show(true);\n\n    return true;\n\n}\n\nWe created one submenu in a file menu. It is an import submenu, which can be seen in Opera web browser.\n\nfile->AppendSeparator();\n\nA menu separator line is created calling an AppendSeparator method.\n\nimp = new wxMenu;\n\nimp->Append(wxID_ANY, wxT(\"Import newsfeed list...\"));\n\nimp->Append(wxID_ANY, wxT(\"Import bookmarks...\"));\n\nimp->Append(wxID_ANY, wxT(\"Import mail...\"));\n\nfile->AppendSubMenu(imp, wxT(\"I&mport\"));\n\nA submenu is created like a normal menu. It is appended with a AppendSubMenu method.\n\nSubmenu\n\nFigure: Submenu\n\nToolbars\n\nMenus group all commands that we can use in an application. Toolbars provide a quick access to the most frequently used commands.\n\nvirtual wxToolBar* wxFrame::CreateToolBar(long style = wxTB_DEFAULT_STYLE,\n\n    wxWindowID id = wxID_ANY, const wxString & name = wxToolBarNameStr)\n\nTo create a toolbar, we call the CreateToolBar method of the frame widget.\n\nA simple toolbar\n\nOur first example will create a simple toolbar.\n\ntoolbar.h\n\n#include <wx/wx.h>\n\nclass Toolbar : public wxFrame\n\n{\n\npublic:\n\n    Toolbar(const wxString& title);\n\n    void OnQuit(wxCommandEvent& event);\n\n};\n\ntoolbar.cpp\n\n#include \"toolbar.h\"\n\nToolbar::Toolbar(const wxString& title)\n\n       : wxFrame(NULL, wxID_ANY, title, \n\n                 wxDefaultPosition, wxSize(300, 250)) {\n\n    wxImage::AddHandler(new wxPNGHandler);\n\n    wxBitmap exit(wxT(\"exit.png\"), wxBITMAP_TYPE_PNG);\n\n    wxToolBar *toolbar = CreateToolBar();\n\n    toolbar->AddTool(wxID_EXIT, wxT(\"Exit application\"), exit);\n\n    toolbar->Realize();\n\n    Connect(wxID_EXIT, wxEVT_COMMAND_TOOL_CLICKED, \n\n        wxCommandEventHandler(Toolbar::OnQuit));\n\n}\n\nvoid Toolbar::OnQuit(wxCommandEvent& WXUNUSED(event)) {\n\n    \n\n    Close(true);\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp {\n\n    public:\n\n        virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"toolbar.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit() {\n\n    Toolbar *toolbar = new Toolbar(wxT(\"Toolbar\"));\n\n    toolbar->Show(true);\n\n    return true;\n\n}\n\nIn our example, we create a toolbar and one tool button. Clicking on the toolbar button will terminate the application.\n\nwxToolBar *toolbar = CreateToolBar();\n\nWe create a toolbar.\n\ntoolbar->AddTool(wxID_EXIT, wxT(\"Exit application\"), exit);\n\nWe add a tool to the toolbar.\n\ntoolbar->Realize();\n\nAfter we have added the tools, we call the Realize method.\n\nToolbar\n\nFigure: Toolbar\n\nToolbars\n\nIf we want to have more than one toolbar, we must create them in a different way, e.g. other than calling the CreateToolbar method.\n\ntoolbars.h\n\n#include <wx/wx.h>\n\nclass Toolbar : public wxFrame {\n\n    public:\n\n        Toolbar(const wxString& title);\n\n        void OnQuit(wxCommandEvent& event);\n\n        wxToolBar *toolbar1;\n\n        wxToolBar *toolbar2;\n\n};\n\ntoolbars.cpp\n\n#include \"toolbars.h\"\n\nToolbar::Toolbar(const wxString& title)\n\n       : wxFrame(NULL, wxID_ANY, title, \n\n                 wxDefaultPosition, wxSize(300, 250)) {\n\n    wxImage::AddHandler(new wxPNGHandler);\n\n    wxBitmap exit(wxT(\"exit.png\"), wxBITMAP_TYPE_PNG);\n\n    wxBitmap newb(wxT(\"new.png\"), wxBITMAP_TYPE_PNG);\n\n    wxBitmap open(wxT(\"open.png\"), wxBITMAP_TYPE_PNG);\n\n    wxBitmap save(wxT(\"save.png\"), wxBITMAP_TYPE_PNG);\n\n    wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);\n\n    toolbar1 = new wxToolBar(this, wxID_ANY);\n\n    toolbar1->AddTool(wxID_ANY, wxT(\"New\"), newb);\n\n    toolbar1->AddTool(wxID_ANY, wxT(\"Open\"), open);\n\n    toolbar1->AddTool(wxID_ANY, wxT(\"\"), save);\n\n    toolbar1->Realize();\n\n    toolbar2 = new wxToolBar(this, wxID_ANY);\n\n    toolbar2->AddTool(wxID_EXIT, wxT(\"Exit application\"), exit);\n\n    toolbar2->Realize();\n\n    vbox->Add(toolbar1, 0, wxEXPAND);\n\n    vbox->Add(toolbar2, 0, wxEXPAND);\n\n    SetSizer(vbox);\n\n    Connect(wxID_EXIT, wxEVT_COMMAND_TOOL_CLICKED, \n\n        wxCommandEventHandler(Toolbar::OnQuit));\n\n}\n\nvoid Toolbar::OnQuit(wxCommandEvent& WXUNUSED(event)) {\n\n    \n\n    Close(true);\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp {\n\n    public:\n\n        virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"toolbars.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit() {\n\n    Toolbar *toolbar = new Toolbar(wxT(\"Toolbar\"));\n\n    toolbar->Show(true);\n\n    return true;\n\n}\n\nIn our example, we create two horizontal toolbars. We place them in a vertical box sizer.\n\ntoolbar1 = new wxToolBar(this, wxID_ANY);\n\n...\n\ntoolbar2 = new wxToolBar(this, wxID_ANY);\n\nHere we create two toolbars.\n\nvbox->Add(toolbar1, 0, wxEXPAND);\n\nvbox->Add(toolbar2, 0, wxEXPAND);\n\nAnd here we add them to the vertical box sizer.\n\nToolbars\n\nFigure: Toolbars\n\nIn this part of the wxWidgets tutorial, we have covered menus and toolbars.","edit_time_ms":1658570931466,"snapshots":[]}