{"id":"01g8qbd0ne8z5kb38yw6djpktt","add_time_ms":1658641089198,"icon":"book","type":"doc","title":"Layout management in wxWidgets","_id":"22","content":"A typical application consists of various widgets. Those widgets are placed inside container widgets. A programmer must manage the layout of the application. This is not an easy task.\n\nIn wxWidgets we have two options:\n\nAbsolute positioning.\n\nSizers.\n\nAbsolute Positioning\n\nThe programmer specifies the position and the size of each widget in pixels. When we use absolute positioning, we have to understand several things:\n\nThe size and the position of a widget do not change if we resize a window.\n\nApplications look different (often poorly) on various platforms.\n\nChanging fonts in our application might spoil the layout.\n\nIf we decide to change our layout, we must completely redo your layout, which is tedious and time consuming.\n\nThere might be situations, where we can possibly use absolute positioning, for example, in simple tutorials. We do not want to make the examples too difficult, so we often use absolute positioning to explain a certain topic. But mostly, in real world programs, programmers use sizers.\n\nIn our example we have a simple skeleton of a text editor. If we resize the window, the size of out wxTextCtrl does not change as we would expect.\n\nabsolute.h\n\n#include <wx/wx.h>\n\n#include <wx/menu.h>\n\nclass Absolute : public wxFrame {\n\n    public:\n\n        Absolute(const wxString& title);\n\n        wxMenuBar *menubar;\n\n        wxMenu *file;\n\n        wxMenu *edit;\n\n        wxMenu *help;\n\n        wxTextCtrl *textctrl;\n\n};\n\nabsolute.cpp\n\n#include \"absolute.h\"\n\nAbsolute::Absolute(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxDefaultPosition, wxSize(350, 250)) {\n\n \n\n    wxPanel *panel = new wxPanel(this, -1);\n\n    menubar = new wxMenuBar;\n\n    file = new wxMenu;\n\n    edit = new wxMenu;\n\n    help = new wxMenu;\n\n    menubar->Append(file, wxT(\"&File\"));\n\n    menubar->Append(edit, wxT(\"&Edit\"));\n\n    menubar->Append(help, wxT(\"&Help\"));\n\n    SetMenuBar(menubar);\n\n    textctrl = new wxTextCtrl(panel, -1, wxT(\"\"), wxDefaultPosition,\n\n        wxSize(250, 150), wxTE_MULTILINE);\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp {\n\n  \n\n    public:\n\n        virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"absolute.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit() {\n\n    Absolute *absolute = new Absolute(wxT(\"Absolute\"));\n\n    absolute->Show(true);\n\n    return true;\n\n}\n\nThis example uses absolute positioning. We position a wxTextCtrl widget on a panel widget.\n\ntextctrl = new wxTextCtrl(panel, -1, wxT(\"\"), wxDefaultPosition,\n\n    wxSize(250, 150), wxTE_MULTILINE);\n\nWe do the absolute positioning in the constructor of the wxTextCtrl widget. In our case, we provide the default position for the widget. The width is 250px and the height 150px.\n\nBefore resizement\n\nFigure: Before resizement\n\n After resizement\n\nFigure: After resizement\n\nThe size of the text control does not change when the window is resized.\n\nUsing sizers\n\nSizers in wxWidgets do address all those issues, we mentioned by absolute positioning. We can choose among these sizers.\n\nwxBoxSizer\n\nwxStaticBoxSizer\n\nwxGridSizer\n\nwxFlexGridSizer\n\nwxGridBagSizer\n\nBefore resizement\n\nFigure: Before resizement\n\n After resizement\n\nFigure: After resizement\n\nsizer.h\n\n#include <wx/wx.h>\n\nclass Sizer : public wxFrame\n\n{\n\npublic:\n\n  Sizer(const wxString& title);\n\n  wxMenuBar *menubar;\n\n  wxMenu *file;\n\n  wxMenu *edit;\n\n  wxMenu *help;\n\n  wxTextCtrl *textctrl;\n\n};\n\nsizer.cpp\n\n#include \"sizer.h\"\n\nSizer::Sizer(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(250, 180))\n\n{\n\n menubar = new wxMenuBar;\n\n file = new wxMenu;\n\n edit = new wxMenu;\n\n help = new wxMenu;\n\n menubar->Append(file, wxT(\"&File\"));\n\n menubar->Append(edit, wxT(\"&Edit\"));\n\n menubar->Append(help, wxT(\"&Help\"));\n\n SetMenuBar(menubar);\n\n textctrl = new wxTextCtrl(this, -1, wxT(\"\"), wxPoint(-1, -1),\n\n     wxSize(250, 150));\n\n    \n\n Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"sizer.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    Sizer *sizer = new Sizer(wxT(\"Sizer\"));\n\n    sizer->Show(true);\n\n    return true;\n\n}\n\nThe wxTextCtrl is placed inside the wxFrame widget. The wxFrame widget has a special built-in sizer. We can put only one widget inside the wxFrame container. The child widget occupies all the space, which is not given to the borders, menu, toolbar, and the statusbar.\n\nwxBoxSizer\n\nThis sizer enables us to put several widgets into a row or a column. We can put another sizer into an existing sizer. This way we can create very complex layouts.\n\nwxBoxSizer(int orient)\n\nwxSizerItem* Add(wxWindow* window, int proportion = 0, int flag = 0, int border = 0)\n\nThe orientation can be wxVERTICAL or wxHORIZONTAL. Adding widgets into the wxBoxSizer is done via the Add method. In order to understand it, we need to look at its parameters.\n\nThe proportion parameter defines the ratio of how will the widgets change in the defined orientation. Let's assume we have tree buttons with the proportions 0, 1, and 2. They are added into a horizontal wxBoxSizer. Button with proportion 0 will not change at all. Button with proportion 2 will change twice more than the one with proportion 1 in the horizontal dimension.\n\nWith the flag parameter you can further configure the behaviour of the widgets within a wxBoxSizer. We can control the border between the widgets. We add some space between widgets in pixels. In order to apply border we need to define sides, where the border will be used. We can combine them with the | operator, e.g wxLEFT | wxBOTTOM. We can choose between these flags:\n\nwxLEFT\n\nwxRIGHT\n\nwxBOTTOM\n\nwxTOP\n\nwxALL\n\nBorder around a panel\n\nFigure: Border around a panel\n\nborder.h\n\n#include <wx/wx.h>\n\nclass Border : public wxFrame\n\n{\n\npublic:\n\n  Border(const wxString& title);\n\n};\n\nborder.cpp\n\n#include \"border.h\"\n\nBorder::Border(const wxString& title)\n\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(250, 200))\n\n{\n\n  wxColour col1, col2;\n\n  col1.Set(wxT(\"#4f5049\"));\n\n  col2.Set(wxT(\"#ededed\"));\n\n  wxPanel *panel = new wxPanel(this, -1);\n\n  panel->SetBackgroundColour(col1);\n\n  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);\n\n  wxPanel *midPan = new wxPanel(panel, wxID_ANY);\n\n  midPan->SetBackgroundColour(col2);\n\n  vbox->Add(midPan, 1, wxEXPAND | wxALL, 20);\n\n  panel->SetSizer(vbox);\n\n  Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"border.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    Border *border = new Border(wxT(\"Border\"));\n\n    border->Show(true);\n\n    return true;\n\n}\n\nIn this example, we create two panels. The second panel has some space around itself.\n\nvbox->Add(midPan, 1, wxEXPAND | wxALL, 20);\n\nWe have placed a 20 px border around a midPan panel. The wxALL flag applies the border size to all four sides. If we use wxEXPAND flag, the widget will use all the space that has been allotted to it.\n\nLastly, we can also define the alignment of our widgets. We do it with the following flags:\n\nwxALIGN_LEFT\n\nwxALIGN_RIGHT\n\nwxALIGN_TOP\n\nwxALIGN_BOTTOM\n\nwxALIGN_CENTER_VERTICAL\n\nwxALIGN_CENTER_HORIZONTAL\n\nwxALIGN_CENTER\n\nSay we wanted to place two buttons into the right bottom of the window.\n\nalign.h\n\n#include <wx/wx.h>\n\nclass Align : public wxFrame\n\n{\n\npublic:\n\n    Align(const wxString& title);\n\n};\n\nalign.cpp\n\n#include \"align.h\"\n\nAlign::Align(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(300, 200))\n\n{\n\n  wxPanel *panel = new wxPanel(this, -1);\n\n  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);\n\n  wxBoxSizer *hbox1 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxBoxSizer *hbox2 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxButton *ok = new wxButton(panel, -1, wxT(\"Ok\"));\n\n  wxButton *cancel = new wxButton(panel, -1, wxT(\"Cancel\"));\n\n  hbox1->Add(new wxPanel(panel, -1));\n\n  vbox->Add(hbox1, 1, wxEXPAND);\n\n\n  hbox2->Add(ok);\n\n  hbox2->Add(cancel);\n\n  vbox->Add(hbox2, 0, wxALIGN_RIGHT | wxRIGHT | wxBOTTOM, 10);\n\n  panel->SetSizer(vbox);\n\n  Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"align.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    Align *align = new Align(wxT(\"Align\"));\n\n    align->Show(true);\n\n    return true;\n\n}\n\nWe create three sizers. One vertical sizer and two horizontal sizers. We put those two horizontal sizers into the vertical one.\n\nhbox1->Add(new wxPanel(panel, -1));\n\nvbox->Add(hbox1, 1, wxEXPAND);\n\nWe put a wxPanel into the first horizontal sizer. We set the proportion to 1 and set a wxEXPAND flag. This way the sizer will occupy all the space except the hbox2.\n\nvbox->Add(hbox2, 0, wxALIGN_RIGHT | wxRIGHT | wxBOTTOM, 10);\n\nWe have placed the buttons into the hbox2 sizer. The hbox2 is right aligned and we also put some space to the bottom and to the right of the buttons.\n\nAligning buttons\n\nFigure: Aligning buttons\n\nGo To Class\n\nIn the following example we introduce several important ideas.\n\ngotoclass.h\n\n#include <wx/wx.h>\n\nclass GotoClass : public wxFrame\n\n{\n\npublic:\n\n  GotoClass(const wxString& title);\n\n};\n\ngotoclass.cpp\n\n#include \"gotoclass.h\"\n\n\nGotoClass::GotoClass(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(450, 400))\n\n{\n\n  wxPanel *panel = new wxPanel(this, -1);\n\n  wxBoxSizer *vbox = new wxBoxSizer(wxVERTICAL);\n\n  wxBoxSizer *hbox1 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxStaticText *st1 =  new wxStaticText(panel, wxID_ANY, \n\n      wxT(\"Class Name\"));\n\n  hbox1->Add(st1, 0, wxRIGHT, 8);\n\n  wxTextCtrl *tc = new wxTextCtrl(panel, wxID_ANY);\n\n  hbox1->Add(tc, 1);\n\n  vbox->Add(hbox1, 0, wxEXPAND | wxLEFT | wxRIGHT | wxTOP, 10);\n\n  vbox->Add(-1, 10);\n\n  wxBoxSizer *hbox2 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxStaticText *st2 = new wxStaticText(panel, wxID_ANY, \n\n      wxT(\"Matching Classes\"));\n\n  hbox2->Add(st2, 0);\n\n  vbox->Add(hbox2, 0, wxLEFT | wxTOP, 10);\n\n  vbox->Add(-1, 10);\n\n  wxBoxSizer *hbox3 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxTextCtrl *tc2 = new wxTextCtrl(panel, wxID_ANY, wxT(\"\"), \n\n      wxPoint(-1, -1), wxSize(-1, -1), wxTE_MULTILINE);\n\n  hbox3->Add(tc2, 1, wxEXPAND);\n\n  vbox->Add(hbox3, 1, wxLEFT | wxRIGHT | wxEXPAND, 10);\n\n  vbox->Add(-1, 25);\n\n  wxBoxSizer *hbox4 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxCheckBox *cb1 = new wxCheckBox(panel, wxID_ANY, \n\n      wxT(\"Case Sensitive\"));\n\n  hbox4->Add(cb1);\n\n  wxCheckBox *cb2 = new wxCheckBox(panel, wxID_ANY, \n\n      wxT(\"Nested Classes\"));\n\n  hbox4->Add(cb2, 0, wxLEFT, 10);\n\n  wxCheckBox *cb3 = new wxCheckBox(panel, wxID_ANY, \n\n      wxT(\"Non-Project Classes\"));\n\n  hbox4->Add(cb3, 0, wxLEFT, 10);\n\n  vbox->Add(hbox4, 0, wxLEFT, 10);\n\n  vbox->Add(-1, 25);\n\n  wxBoxSizer *hbox5 = new wxBoxSizer(wxHORIZONTAL);\n\n  wxButton *btn1 = new wxButton(panel, wxID_ANY, wxT(\"Ok\"));\n\n  hbox5->Add(btn1, 0);\n\n  wxButton *btn2 = new wxButton(panel, wxID_ANY, wxT(\"Close\"));\n\n  hbox5->Add(btn2, 0, wxLEFT | wxBOTTOM , 5);\n\n  vbox->Add(hbox5, 0, wxALIGN_RIGHT | wxRIGHT, 10);\n\n  panel->SetSizer(vbox);\n\n  Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"gotoclass.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n GotoClass *gotoclass = new GotoClass(wxT(\"GotoClass\"));\n\n gotoclass->Show(true);\n\n return true;\n\n}\n\nThis is a complex example using wxBoxSizer. The layout is straitforward. We create one vertical sizer. We put then five horizontal sizers into it.\n\nvbox->Add(hbox3, 1, wxLEFT | wxRIGHT | wxEXPAND, 10);\n\nvbox->Add(-1, 25);\n\nWe already know that we can control the distance among widgets by combining the flag parameter with the border parameter. But there is one real constraint. In the Add method we can specify only one border for all given sides. In our example, we give 10 px to the right and to the left. But we cannot give 25 px to the bottom. What we can do is to give 10 px to the bottom, or 0 px. If we omit wxBOTTOM. So if we need different values, we can add some extra space. With the Add method, we can insert widgets and space as well.\n\nvbox->Add(hbox5, 0, wxALIGN_RIGHT | wxRIGHT, 10);\n\nWe place the two buttons on the right side of the window. How do we do it? Three things are important to achieve this: the proportion, the align flag, and the wxEXPAND flag. The proportion must be zero. The buttons should not change their size, when we resize our window. We must not specify wxEXPAND flag. The buttons occopy only the area that has been alotted to it. And finally, we must specify the wxALIGN_RIGHT flag. The horizontal sizer spreads from the left side of the window to the right side. So if we specify wxALIGN_RIGHT flag, the buttons are placed to the right side. Exactly, as we wanted.\n\nGotoClass\n\nFigure: GotoClass\n\nwxGridSizer\n\nwxGridSizer lays out widgets in two dimensional table. Each cell within the table has the same size.\n\nwxGridSizer(int rows, int cols, int vgap, int hgap)\n\nIn the constructor we specify the number of rows and columns in the table. And the vertical and horizontal space between our cells.\n\nIn our example we create a skeleton of a calculator. It is a perfect example for a wxGridSizer.\n\ngridsizer.h\n\n#include <wx/wx.h>\n\nclass GridSizer : public wxFrame\n\n{\n\npublic:\n\n  GridSizer(const wxString& title);\n\n  wxMenuBar *menubar;\n\n  wxMenu *file;\n\n  wxBoxSizer *sizer;\n\n  wxGridSizer *gs;\n\n  wxTextCtrl *display;\n\n};\n\ngridsizer.cpp\n\n#include \"gridsizer.h\"\n\nGridSizer::GridSizer(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(270, 220))\n\n{\n\n  menubar = new wxMenuBar;\n\n  file = new wxMenu;\n\n  SetMenuBar(menubar);\n\n  sizer = new wxBoxSizer(wxVERTICAL);\n\n \n\n  display = new wxTextCtrl(this, -1, wxT(\"\"), wxPoint(-1, -1),\n\n     wxSize(-1, -1), wxTE_RIGHT);\n\n  sizer->Add(display, 0, wxEXPAND | wxTOP | wxBOTTOM, 4);\n\n  gs = new wxGridSizer(4, 4, 3, 3);\n\n  gs->Add(new wxButton(this, -1, wxT(\"Cls\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"Bck\")), 0, wxEXPAND);\n\n  gs->Add(new wxStaticText(this, -1, wxT(\"\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"Close\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"7\")), 0, wxEXPAND); \n\n  gs->Add(new wxButton(this, -1, wxT(\"8\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"9\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"/\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"4\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"5\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"6\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"*\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"1\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"2\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"3\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"-\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"0\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\".\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"=\")), 0, wxEXPAND);\n\n  gs->Add(new wxButton(this, -1, wxT(\"+\")), 0, wxEXPAND);\n\n  sizer->Add(gs, 1, wxEXPAND);\n\n  SetSizer(sizer);\n\n  SetMinSize(wxSize(270, 220));\n\n  Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"gridsizer.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    GridSizer *gs = new GridSizer(wxT(\"GridSizer\"));\n\n    gs->Show(true);\n\n    return true;\n\n}\n\nIn our example, we set a vertical sizer for a wxFrame. We put a static text and a grid sizer into the vertical sizer.\n\nNotice how we managed to put a space between the Bck and the Close buttons. We simply put an empty wxStaticText there.\n\ngs->Add(new wxButton(this, -1, wxT(\"Cls\")), 0, wxEXPAND);\n\nWe call the Add method multiple times. Widgets are placed inside the table in the order, they are added. The first row is filled first, then the second row etc.\n\nGridSizer\n\nFigure: GridSizer\n\nwxFlexGridSizer\n\nThis sizer is similar to wxGridSizer. It does also lay out its widgets in a two dimensional table. It adds some flexibility to it. wxGridSizer cells are of the same size. All cells in wxFlexGridSizer have the same height in a row. All cells have the same width in a column. But all rows and columns are not necessarily the same height or width.\n\nwxFlexGridSizer(int rows, int cols, int vgap, int hgap)\n\nrows and cols specify the number of rows and columns in a sizer. vgap and hgap add some space between widgets in both directions.\n\nMany times developers have to develop dialogs for data input and modification. I find wxFlexGridSizer suitable for such a task. A developer can easily set up a dialog window with this sizer. It is also possible to accomplish this with wxGridSizer, but it would not look nice, because of the constraint that each cell has the same size.\n\nflexgridsizer.h\n\n#include <wx/wx.h>\n\nclass FlexGridSizer : public wxFrame\n\n{\n\npublic:\n\n  FlexGridSizer(const wxString& title);\n\n};\n\nflexgridsizer.cpp\n\n#include \"flexgridsizer.h\"\n\nFlexGridSizer::FlexGridSizer(const wxString& title)\n\n       : wxFrame(NULL, -1, title, wxPoint(-1, -1), wxSize(270, 220))\n\n{ \n\n  wxPanel *panel = new wxPanel(this, -1);\n\n  wxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);\n\n  wxFlexGridSizer *fgs = new wxFlexGridSizer(3, 2, 9, 25);\n\n  wxStaticText *thetitle = new wxStaticText(panel, -1, wxT(\"Title\"));\n\n  wxStaticText *author = new wxStaticText(panel, -1, wxT(\"Author\"));\n\n  wxStaticText *review = new wxStaticText(panel, -1, wxT(\"Review\"));\n\n  wxTextCtrl *tc1 = new wxTextCtrl(panel, -1);\n\n  wxTextCtrl *tc2 = new wxTextCtrl(panel, -1);\n\n  wxTextCtrl *tc3 = new wxTextCtrl(panel, -1, wxT(\"\"),\n\n      wxPoint(-1, -1), wxSize(-1, -1), wxTE_MULTILINE);\n\n  fgs->Add(thetitle);\n\n  fgs->Add(tc1, 1, wxEXPAND);\n\n  fgs->Add(author);\n\n  fgs->Add(tc2, 1, wxEXPAND);\n\n  fgs->Add(review, 1, wxEXPAND);\n\n  fgs->Add(tc3, 1, wxEXPAND);\n\n  fgs->AddGrowableRow(2, 1);\n\n  fgs->AddGrowableCol(1, 1);\n\n  hbox->Add(fgs, 1, wxALL | wxEXPAND, 15);\n\n  panel->SetSizer(hbox);\n\n  Centre();\n\n}\n\nmain.h\n\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n\n{\n\n  public:\n\n    virtual bool OnInit();\n\n};\n\nmain.cpp\n\n#include \"main.h\"\n\n#include \"flexgridsizer.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n\n{\n\n    FlexGridSizer *fgs = new FlexGridSizer(wxT(\"FlexGridSizer\"));\n\n    fgs->Show(true);\n\n    return true;\n\n}\n\nIn our example we create a simple dialog. It could be used to insert data into the database.\n\nwxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);\n\n...\n\nhbox->Add(fgs, 1, wxALL | wxEXPAND, 15);\n\nWe create a horizontal box sizer in order to put some space (15px) around the table of widgets.\n\nfgs->Add(thetitle);\n\nWe add widgets to the sizer exactly as with the gridsizer.\n\nfgs->AddGrowableRow(2, 1);\n\nfgs->AddGrowableCol(1, 1);\n\nWe make the third row and the second column growable. This way we make the text controls grow, when the window is resized. The first two text controls will grow in horizontal direction, the third one will grow in both direction. We must not forget to make the widgets expandable (wxEXPAND) in order to make it really work.\n\n![image.png]({$WP_ASSETS}/1e1354d4b3f16a701c3c4d50e08245df.png)\n\nFlexGridSizer\n\nFigure: FlexGridSizer\n\nThis part of the wxWidgets tutorial was dedicated to layout management.\n\n\n\n\n\n\n\n\n\n\n\n\n\n","edit_time_ms":1658641334502,"snapshots":[]}