{"id":"01hd96pvr5g68e94k71by8nxpm","add_time_ms":1697894854405,"icon":"book","type":"doc","title":"对库添加使用依赖","_id":"77","content":"## Step3:对库添加使用依赖\n\n使用依赖能够让我们更好地控制库或者可执行程序使用的链接和包含.也提供了对CMake内的可及属性的更充分的控制.控制使用依赖的首要命令包括:\n+ [target_compile_definitions](https://cmake.org/cmake/help/latest/command/target_compile_definitions.html#command:target_compile_definitions)\n+ [target_compile_options](https://cmake.org/cmake/help/latest/command/target_compile_options.html#command:target_compile_options)\n+ [target_include_directories](https://cmake.org/cmake/help/latest/command/target_include_directories.html#command:target_include_directories)\n+ [target_link_libraries](https://cmake.org/cmake/help/latest/command/target_link_libraries.html#command:target_link_libraries)\n\n让我们用现代CMake的方式重构Step2中的使用依赖的部分. 我们首先明确任何链接到MathFunctions的对象都需要包含当前源目录(译者注：指`MathFunctions`目录),除了MathFunctions本身.所以这可以作为一个`INTERFACE`使用依赖.\n\n记住`INTERFACE`指的是那些消费者需要而生产者不需要的东西.在`MathFunctions/CMakeLists.txt`的结尾加入:\n\n```CMake\ntarget_include_directories(MathFunctions\n          INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}\n          )\n```\n\n现在我们已经指定了MathFunctions的使用依赖,我们就可以安全地移除顶级`CMakeLists.txt`文件中的`EXTRA_INCLUDES`变量:\n\n```CMake\nif(USE_MYMATH)\n  add_subdirectory(MathFunctions)\n  list(APPEND EXTRA_LIBS MathFunctions)\nendif()\n```\n\n以及:\n\n```CMake\ntarget_include_directories(Tutorial PUBLIC\n                           \"${PROJECT_BINARY_DIR}\"\n                           )\n```\n\n完成后,运行`cmake`或者`cmake-gui`来配置项目并通过在build目录下`cmake --build .`构建运行即可.\n\n","edit_time_ms":1697894961069,"char_count":{"word":287,"char_without_spaces":1238,"char_with_spaces":1328}}