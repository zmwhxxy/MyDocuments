{"id":"01hd96x4aevw36pegxv4scy2b9","add_time_ms":1697895059790,"icon":"book","type":"doc","title":"增加系统自检","_id":"79","content":"## 增加系统自检\n\n现在我们想项目中增加一些代码,而这些代码依赖的特性可能是目标平台没有的.例如,我们要加入的代码依赖于目标平台是否有`log`和`exp`函数.当然,对于每个平台而言,这些功能都是有的,但是在本篇教程中,我们假定这些功能不是都存在的.\n\n如果平台有`log`和`exp`那么我们就在`mysqrt`函数里使用.我们首先在顶层`CMakeLists.txt`里用`CheckSymbolExists`来测试这些函数的可用性.在一些平台,我们会需要连接到`m`库如果`log`和`exp`没有被招到,就需要在`m`库里再试试.\n\n```CMake\ninclude(CheckSymbolExists)\ncheck_symbol_exists(log \"math.h\" HAVE_LOG)\ncheck_symbol_exists(exp \"math.h\" HAVE_EXP)\nif(NOT (HAVE_LOG AND HAVE_EXP))\n  unset(HAVE_LOG CACHE)\n  unset(HAVE_EXP CACHE)\n  set(CMAKE_REQUIRED_LIBRARIES \"m\")\n  check_symbol_exists(log \"math.h\" HAVE_LOG)\n  check_symbol_exists(exp \"math.h\" HAVE_EXP)\n  if(HAVE_LOG AND HAVE_EXP)\n    target_link_libraries(MathFunctions PRIVATE m)\n  endif()\nendif()\n```\n\n现在让我们给`TutorialConfig.h.in`添加一些定义,这样我们就可以在`mysqrt.cxx`里使用了:\n\n```C++\n// does the platform provide exp and log functions?\n#cmakedefine HAVE_LOG\n#cmakedefine HAVE_EXP\n```\n\n如果`log`和`exp`在系统上可用,那么我们就在`mysqrt`里使用它们.在`MathFunctions/mysqrt.cxx`里的`mysqrt`里添加下述代码(别忘了返回值之前加`#endif`):\n\n```C++\n#if defined(HAVE_LOG) && defined(HAVE_EXP)\n  double result = exp(log(x) * 0.5);\n  std::cout << \"Computing sqrt of \" << x << \" to be \" << result\n            << \" using log and exp\" << std::endl;\n#else\n  double result = x;\n```\n\n我们也需要修改`mysqrt.cxx`来包含`cmath`:\n\n```C++\n#include <cmath>\n```\n\n运行`cmake`或者`cmake-gui`来配置项目,然后构建并执行Tutorial.\n\n会注意到我们没有使用`log`和`exp`,即使我们认为它们应该是可用的.我们应该很容易发现,我们忘记在`mysqrt.cxx`中包含`TutorialConfig.h`了.\n\n我们也需要更新`MathFunctions/CMakeLists.txt`,这样`mysqrt.cxx`才能够定位文件:\n\n```CMake\ntarget_include_directories(MathFunctions\n          INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}\n          PRIVATE ${CMAKE_BINARY_DIR}\n          )\n```\n\n这样更新后,继续并构建项目,然后运行Tutorial.如果`log`和`exp`仍然没有被使用,打开构建目录下的生成的`Tutorial.h`文件,可能他们在当前系统下不可用的.\n\n那个函数目前结果更好呢,sqrt还是mysqrt?\n\n### 指定编译定义\n除了在`TutorialConfig.h`中存储`HAVE_LOG`和`HAVE_EXP`值以外更好的地方么?让我们试试使用`target_compile_definitions()`.\n\n首先将定义从`TutorialConfig.h`中移除,我们不再需要从`mysqrt.cxx`中包含`TutorialConfig.h`或者在`MathFunctions/CMakeLists.txt`中额外包含了.\n\n接下来我们可以把`HAVE_LOG`和`HAVR_EXP`的检查移动到`MathFunctions/CMakeLists.txt`中,然后把这些值设定为`PRIVATE`编译定义.\n\n```CMake\ninclude(CheckSymbolExists)\ncheck_symbol_exists(log \"math.h\" HAVE_LOG)\ncheck_symbol_exists(exp \"math.h\" HAVE_EXP)\nif(NOT (HAVE_LOG AND HAVE_EXP))\n  unset(HAVE_LOG CACHE)\n  unset(HAVE_EXP CACHE)\n  set(CMAKE_REQUIRED_LIBRARIES \"m\")\n  check_symbol_exists(log \"math.h\" HAVE_LOG)\n  check_symbol_exists(exp \"math.h\" HAVE_EXP)\n  if(HAVE_LOG AND HAVE_EXP)\n    target_link_libraries(MathFunctions PRIVATE m)\n  endif()\nendif()\n\n# add compile definitions\nif(HAVE_LOG AND HAVE_EXP)\n  target_compile_definitions(MathFunctions\n                             PRIVATE \"HAVE_LOG\" \"HAVE_EXP\")\nendif()\n```\n\n这样调整更新后,重新构建项目,再运行Tutorial并确认结果和此前一致.","edit_time_ms":1697895104825,"char_count":{"word":730,"char_without_spaces":2381,"char_with_spaces":2586}}