{"id":"01gerkphgmhpfh0qgec24ey0qd","add_time_ms":1665125795348,"icon":"book","type":"doc","title":"消息对话框","_id":"29","content":"消息对话框\n\n  消息对话框用于向用户显示消息。他们是可定制的。我们可以改变\n将在对话框中显示的图标和按钮。\n\n\nCMakeLists.txt\n\n    cmake_minimum_required(VERSION 3.16)\n    project(MessageDialog)\n    \n    set(CMAKE_CXX_STANDARD 14)\n    \n    #设置预编译指令\n    add_definitions(\n            -DwxMSVC_VERSION_AUTO=1\n            -DwxMSVC_VERSION_COMPAT=1\n    )\n    \n    #设置包含目录\n    include_directories(\n            $ENV{WXWIN}/include\n            $ENV{WXWIN}/lib/vc14x_lib/mswud\n    )\n    \n    #设置链接库目录\n    link_directories(\n            $ENV{WXWIN}/lib/vc14x_lib\n    )\n    \n    #添加可执行文件 ${PROJECT_NAME}\n    add_executable(\n            ${PROJECT_NAME}\n            main.cpp Messages.cpp Messages.h main.h)\n    \n    #设置程序运行窗口\n    if(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        set_property(\n                TARGET ${PROJECT_NAME} PROPERTY\n                WIN32_EXECUTABLE true\n        )\n    endif()\n    \n    #设置调试模式\n    set_property(\n            TARGET ${PROJECT_NAME} PROPERTY\n            MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\"\n    )\n    \n    target_link_libraries(\n            ${PROJECT_NAME}\n            shlwapi.lib\n            version.lib\n            comctl32.lib\n            rpcrt4.lib\n            ws2_32.lib\n            wininet.lib\n            winmm.lib\n            wxmsw32ud_gl.lib\n            wxmsw32ud_stc.lib\n            wxmsw32ud_richtext.lib\n            wxmsw32ud_propgrid.lib\n            wxmsw32ud_ribbon.lib\n            wxmsw32ud_aui.lib\n            wxmsw32ud_xrc.lib\n            wxbase32ud_xml.lib\n            wxmsw32ud_qa.lib\n            wxmsw32ud_webview.lib\n            wxmsw32ud_html.lib\n            wxmsw32ud_media.lib\n            wxmsw32ud_adv.lib\n            wxmsw32ud_core.lib\n            wxbase32ud_net.lib\n            wxbase32ud.lib\n            wxscintillad.lib\n            wxexpatd.lib\n            wxtiffd.lib\n            wxjpegd.lib\n            wxpngd.lib\n            wxzlibd.lib\n            wxregexud.lib\n            wxmsw32u_gl.lib\n    )\n\n\nMessages.h\n\n    #include <wx/wx.h>\n    class Messages : public wxFrame\n    {\n    public:\n     Messages(const wxString& title);\n     \n     void ShowMessage1(wxCommandEvent & event);\n     void ShowMessage2(wxCommandEvent & event);\n     void ShowMessage3(wxCommandEvent & event);\n     void ShowMessage4(wxCommandEvent & event);\n    };\n    const int ID_INFO = 1;\n    const int ID_ERROR = 2;\n    const int ID_QUESTION = 3;\n    const int ID_ALERT = 4;\n\n\nMessages.cpp\n\n    #include \"Messages.h\"\n    Messages::Messages(const wxString& title)\n     : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(210, 110))\n    {\n     wxPanel *panel = new wxPanel(this, wxID_ANY);\n     wxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);\n     wxGridSizer *gs = new wxGridSizer(2, 2, 2, 2);\n     wxButton *btn1 = new wxButton(panel, ID_INFO, wxT(\"Info\"));\n     wxButton *btn2 = new wxButton(panel, ID_ERROR, wxT(\"Error\"));\n     wxButton *btn3 = new wxButton(panel, ID_QUESTION, wxT(\"Question\"));\n     wxButton *btn4 = new wxButton(panel, ID_ALERT, wxT(\"Alert\"));\n     Connect(ID_INFO, wxEVT_COMMAND_BUTTON_CLICKED, \n     wxCommandEventHandler(Messages::ShowMessage1));\n     Connect(ID_ERROR, wxEVT_COMMAND_BUTTON_CLICKED, \n     wxCommandEventHandler(Messages::ShowMessage2));\n     Connect(ID_QUESTION, wxEVT_COMMAND_BUTTON_CLICKED, \n     wxCommandEventHandler(Messages::ShowMessage3));\n     Connect(ID_ALERT, wxEVT_COMMAND_BUTTON_CLICKED, \n     wxCommandEventHandler(Messages::ShowMessage4));\n     gs->Add(btn1, 1, wxEXPAND);\n     gs->Add(btn2, 1);\n     gs->Add(btn3, 1);\n     gs->Add(btn4, 1);\n     hbox->Add(gs, 0, wxALL, 15);\n     panel->SetSizer(hbox);\n     Center();\n    }\n    void Messages::ShowMessage1(wxCommandEvent& event) \n    {\n     wxMessageDialog *dial = new wxMessageDialog(NULL, \n     wxT(\"Download completed\"), wxT(\"Info\"), wxOK);\n     dial->ShowModal();\n    }\n    void Messages::ShowMessage2(wxCommandEvent& event) \n    {\n     wxMessageDialog *dial = new wxMessageDialog(NULL, \n     wxT(\"Error loading file\"), wxT(\"Error\"), wxOK | wxICON_ERROR);\n     dial->ShowModal();\n    }\n    void Messages::ShowMessage3(wxCommandEvent& event) \n    {\n     wxMessageDialog *dial = new wxMessageDialog(NULL, \n     wxT(\"Are you sure to quit?\"), wxT(\"Question\"), \n     wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);\n     dial->ShowModal();\n    }\n    void Messages::ShowMessage4(wxCommandEvent& event) \n    {\n     wxMessageDialog *dial = new wxMessageDialog(NULL, \n     wxT(\"Unallowed operation\"), wxT(\"Exclamation\"), \n     wxOK | wxICON_EXCLAMATION);\n     dial->ShowModal();\n    }\n\n\nmain.h\n\n    #include <wx/wx.h>\n    class MyApp : public wxApp\n    {\n     public:\n     virtual bool OnInit();\n    };\n\n\nmain.cpp\n\n    #include \"main.h\"\n    #include \"Messages.h\"\n    IMPLEMENT_APP(MyApp)\n    bool MyApp::OnInit()\n    {\n     Messages *msgs = new Messages(wxT(\"Messages\"));\n     msgs->Show(true);\n     return true;\n    }\n\n\n  在我们的示例中，我们创建了四个按钮，并将它们放在网格大小调整器中。这些按钮将显示四个不同的对话框窗口。我们通过指定不同的样式标志来创建它们。  \n  \n    wxMessageDialog *dial = new wxMessageDialog(NULL, \n     wxT(\"Error loading file\"), wxT(\"Error\"), wxOK | wxICON_ERROR);\n    dial->ShowModal();\n\n  消息对话框的创建很简单。我们将对话框设置为顶层窗口提供NULL作为父对象。这两个字符串提供消息文本和对话框标题。我们将展示一个OK按钮和一个错误图标，通过指定wxOK和wxICON_ERROR标志。显示对话框在屏幕上，我们调用ShowModal()方法。","edit_time_ms":1665139413774,"char_count":{"word":597,"char_without_spaces":3726,"char_with_spaces":4985}}