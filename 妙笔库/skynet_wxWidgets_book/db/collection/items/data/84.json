{"id":"01hd970hkedp5fbrnd3t9y94ja","add_time_ms":1697895171694,"icon":"book","type":"doc","title":"增加生成表达式","_id":"84","content":"## 增加生成表达式\n\n[生成器表达式](https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html#manual:cmake-generator-expressions(7))是在构建系统生成期间执行以生成对于每一特定配置专有的信息.\n\n生成表达式可以在许多目标属性内容中使用,诸如`LINK_LIBRARIES`,`INCLUDE_DIRECTORIES`,`COMPILE_DEFINITIONS`和其他一些属性.生成表达式也可以在使用命令丰富这些属性的时候使用,例如`target_link_libraries()`,`target_include_directories()`,`target_compile_definitions()`和其他命令.\n\n生成表达式可用于启用条件链接,在编译时的条件定义,条件包含目录等等.这些条件可能基于构建配置,目标属性,平台信息或者其他可查询信息.\n\n生成表达式有着不同的类型,包括逻辑表达式,信息表达式和输出表达式.\n\n逻辑表达式用于创建条件输出.基本表达式是01表达式,`$<0:...>`结果是一个空字符串,`$<1:...>`结果是`\"...\"`的内容.它们也同样是可嵌套的.\n\n生成表达式的普遍用法是依据不同条件添加编译器标志,例如语言级别的或者警告.一个好的模式是把这些信息和允许传播这些信息的`INTERFACE`目标关联起来.让我们从构建一个`INTERFACE`目标并指定需要的C++标准级别是`11`而非`CMAKE_CXX_STANDARD`开始.\n\n故下述代码:\n\n```CMake\n# specify the C++ standard\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n```\n\n被替换为:\n\n```CMake\nadd_library(tutorial_compiler_flags INTERFACE)\ntarget_compile_features(tutorial_compiler_flags INTERFACE cxx_std_11)\n```\n\n下一步我们添加项目所需的预期的编译器警告标志.因为警告标志基于编译器,我们用`COMPILE_LAND_AND_ID`生成器表达式来控制在给定的语言和一系列编译器id下,哪些标志被使用.如下所示:\n\n```CMake\nset(gcc_like_cxx \"$<COMPILE_LANG_AND_ID:CXX,ARMClang,AppleClang,Clang,GNU>\")\nset(msvc_cxx \"$<COMPILE_LANG_AND_ID:CXX,MSVC>\")\ntarget_compile_options(tutorial_compiler_flags INTERFACE\n  \"$<${gcc_like_cxx}:$<BUILD_INTERFACE:-Wall;-Wextra;-Wshadow;-Wformat=2;-Wunused>>\"\n  \"$<${msvc_cxx}:$<BUILD_INTERFACE:-W3>>\"\n)\n```\n\n我们能发现警告信息被封装在`BUILD_INTERFACE`条件内.这样可以让安装我们项目的用户不会继承我们的警告标志.\n\n**练习**:修改`MathFunctions/CMakeLists.txt`,使得所有的目标都有`target_link_libraries()`来调用`tutorial_compiler_flags`.","edit_time_ms":1697895224759,"char_count":{"word":542,"char_without_spaces":1492,"char_with_spaces":1509}}