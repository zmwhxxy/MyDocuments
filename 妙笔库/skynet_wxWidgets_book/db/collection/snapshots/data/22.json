{"id":"01gz65efdgm7p0b25707xy385e","item_id":"01g8dxtt5xjcmnbw9k0gqkgbj9","add_time_ms":1682760482225,"hash":"2e387a3131ffaf22482b2120655a090b","full_content":"事件是每个GUI应用程序不可分割的一部分。所有GUI应用程序都是事件驱动的。应用程序对其生命周期内生成的不同事件类型作出反应。事件主要由应用程序的用户产生。但它们也可以通过其他方式生成，例如互联网连接、窗口管理器或计时器。当应用程序启动时，将创建一个主循环。应用程序位于主循环中，等待事件生成。当我们退出应用程序时，主循环退出。\n\n\n定义\n\n事件是来自底层框架(通常是GUI工具包)的应用程序级信息。事件循环是一种编程结构，用于在程序中等待和分派事件或消息。事件循环反复查找事件来处理它们。调度程序是将事件映射到事件处理程序的进程。事件处理程序是对事件作出反应的方法。\n\n事件对象是与事件关联的对象。它通常是一个窗口。事件类型是已生成的唯一事件。\n\n在wxWidgets中处理事件的传统方法是使用静态事件表。这是受微软基础类(MFC)的影响。更灵活、更现代的方法是使用Connect方法。我们在整个wxWidgets教程中都使用它。\n\n\n事件表\n在下一个示例中，我们将展示一个使用事件表的示例。\n\nmybutton.h\n\n    #ifndef EVENTTABLE_MYBUTTON_H\n    #define EVENTTABLE_MYBUTTON_H\n    \n    #include \"wx/wx.h\"\n    \n    class MyButton : public wxFrame {\n    public:\n        MyButton(const wxString& title);\n    \n        void OnQuit(wxCommandEvent& event);\n    \n    private:\n    //    声明使用事件表\n        DECLARE_EVENT_TABLE()\n    };\n    \n    \n    #endif //EVENTTABLE_MYBUTTON_H\n\n\n\nmybutton.cpp\n\n    #include \"mybutton.h\"\n    \n    //事件表开始\n    BEGIN_EVENT_TABLE(MyButton, wxFrame)\n        EVT_BUTTON(wxID_EXIT, MyButton::OnQuit)\n    \n    //事件表结束\n    END_EVENT_TABLE()\n    \n    MyButton::MyButton(const wxString &title)\n        :wxFrame(nullptr, wxID_ANY, title, wxDefaultPosition, wxSize(270, 150))\n    {\n        wxPanel* panel = new wxPanel(this, wxID_ANY);\n        wxButton* button = new wxButton(panel, wxID_EXIT, wxT(\"Quit\"), wxPoint(20, 20));\n    \n        this->Center();\n    }\n    \n    void MyButton::OnQuit(wxCommandEvent &event) {\n        this->Close(true);\n    }\n\n\n\nmain.h\n\n    #ifndef EVENTTABLE_MAIN_H\n    #define EVENTTABLE_MAIN_H\n    \n    #include \"wx/wx.h\"\n    \n    class MyApp : public wxApp {\n    public:\n        virtual bool OnInit();\n    };\n    \n    #endif //EVENTTABLE_MAIN_H\n\n\n\nmain.cpp\n  \n    #include \"main.h\"\n    #include \"mybutton.h\"\n    \n    wxIMPLEMENT_APP(MyApp);\n    \n    bool MyApp::OnInit() {\n        MyButton* frame = new MyButton(wxT(\"Button\"));\n        frame->Show(true);\n    \n        return true;\n    }\n\n\n\nCMakeLists.txt\n  \n    cmake_minimum_required(VERSION 3.16)\n    project(EventTable)\n\n    set(CMAKE_CXX_STANDARD 14)\n\n    add_definitions(\n           -DwxMSVC_VERSION_AUTO=1\n           -DwxMSVC_VERSION_COMPAT=1\n           -DUNICODE=1\n    \n\n    nclude_directories(\n           $ENV{WXWIN}/include\n           $ENV{WXWIN}/lib/vc14x_lib/mswud\n    \n\n    ink_directories(\n           $ENV{WXWIN}/lib/vc14x_lib\n    \n\n    dd_executable(${PROJECT_NAME}\n\n           main.h main.cpp mybutton.cpp mybutton.h)\n\n    f (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n       set_property(\n               TARGET ${PROJECT_NAME} PROPERTY\n               WIN32_EXECUTABLE true\n       )\n    ndif ()\n\n    et_property(\n           TARGET ${PROJECT_NAME} PROPERTY\n           MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\"\n    \n\n    arget_link_libraries(\n           ${PROJECT_NAME}\n           shlwapi.lib\n           version.lib\n           comctl32.lib\n           rpcrt4.lib\n           ws2_32.lib\n           wininet.lib\n           winmm.lib\n           wxmsw32ud_gl.lib\n           wxmsw32ud_stc.lib\n           wxmsw32ud_richtext.lib\n           wxmsw32ud_propgrid.lib\n           wxmsw32ud_ribbon.lib\n           wxmsw32ud_aui.lib\n           wxmsw32ud_xrc.lib\n           wxbase32ud_xml.lib\n           wxmsw32ud_qa.lib\n           wxmsw32ud_webview.lib\n           wxmsw32ud_html.lib\n           wxmsw32ud_media.lib\n           wxmsw32ud_adv.lib\n           wxmsw32ud_core.lib\n           wxbase32ud_net.lib\n           wxbase32ud.lib\n           wxscintillad.lib\n           wxexpatd.lib\n           wxtiffd.lib\n           wxjpegd.lib\n           wxpngd.lib\n           wxzlibd.lib\n           wxregexud.lib\n           wxmsw32u_gl.lib\n    \n\nwxWidgets编程基于事件驱动编程范式。用户操作(以及其他操作)会触发导致事件处理程序被执行的事件。\n在下面的例子中，我们在框架小部件上创建一个按钮。我们将展示如何创建一个简单的事件处理程序。\n\nEventsFrame.h\n\n    #ifndef EVENTS_EVENTSFRAME_H\n    #define EVENTS_EVENTSFRAME_H\n    \n    #include <wx/wx.h>\n    \n    class EventsFrame : public wxFrame {\n    public:\n        EventsFrame(const wxString& title);\n        void OnQuit(wxCommandEvent& event);\n    };\n    \n    \n    #endif //EVENTS_EVENTSFRAME_H\n\n/*************************************************************************************************************/\n\n\n\n\n/*************************************************************************************************************/\n\n\nEventsFrame.cpp\n\n    #include \"EventsFrame.h\"\n    \n    EventsFrame::EventsFrame(const wxString &title)\n        :wxFrame(nullptr, wxID_ANY, title, wxDefaultPosition, wxSize(270, 150))\n    {\n        wxPanel* panel = new wxPanel(this, wxID_ANY);\n        wxButton* button = new wxButton(panel, wxID_EXIT, wxT(\"Quit\"), wxPoint(20, 20));\n        this->Connect(wxID_EXIT, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(EventsFrame::OnQuit));\n        button->SetFocus();\n        this->Center();\n    }\n    \n    void EventsFrame::OnQuit(wxCommandEvent &event) {\n        this->Close(true);\n    }\n\n\n/*************************************************************************************************************/\n\n\n\n\n/*************************************************************************************************************/\n\n\nEventsApp.h\n\n    #ifndef EVENTS_EVENTSAPP_H\n    #define EVENTS_EVENTSAPP_H\n    \n    #include <wx/wx.h>\n    \n    class EventsApp : public wxApp {\n    public:\n        virtual bool OnInit();\n    };\n    \n    \n    #endif //EVENTS_EVENTSAPP_H\n\n\n/*************************************************************************************************************/\n\n\n\n\n/*************************************************************************************************************/\n\n\nEventsApp.cpp\n\n    #include \"EventsApp.h\"\n    #include \"EventsFrame.h\"\n    \n    wxIMPLEMENT_APP(EventsApp);\n    \n    bool EventsApp::OnInit() {\n        EventsFrame* frame = new EventsFrame(wxT(\"Events Test\"));\n        frame->Show(true);\n    \n        return true;\n    }\n\n\n首先，我们创建一个wxPanel小部件。它将被放置在wxFrame小部件中。\n    wxPanel *panel = new wxPanel(this, wxID_ANY);\n    \n\n我们创建一个wxButton小部件。它被放在面板上。我们为按钮使用预定义的wxID_EXIT id。它将导致在按钮上显示一个小的退出图标。按钮的标签是“Quit”。按钮手动定位在x=20, y=20坐标。坐标系统的起点在左上角。\n    wxButton *button = new wxButton(panel, wxID_EXIT, wxT(\"Quit\"), wxPoint(20, 20));\n\n\n如果我们单击按钮，将生成一个wxEVT_COMMAND_BUTTON_CLICKED事件。我们将该事件连接到Button类的OnQuit方法。当我们点击按钮时，OnQuit方法会被调用。\n    Connect(wxID_EXIT, wxEVT_COMMAND_BUTTON_CLICKED, \n        wxCommandEventHandler(Button::OnQuit));\n\n\n我们将键盘焦点设置为按钮。如果我们按下Enter键，按钮就会被点击。\n    button->SetFocus();\n\n\n在OnQuit方法中，我们调用Close方法。这将终止我们的应用程序。\n    Close(true);\n\n\n\n下图是程序的运行效果:\n![image.png]({$WP_ASSETS}/ffe2b45242d2b53e3d3295cbd16b2662.png)\n\n\n\n了解小部件在应用程序中如何通信是很重要的。下面是下一个例子。\n/*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　\nLeftPanel.h\n    \n    #ifndef WIDGETSCOMMUNICATE_LEFTPANEL_H\n    #define WIDGETSCOMMUNICATE_LEFTPANEL_H\n    \n    #include <wx/wx.h>\n    \n    class LeftPanel : public wxPanel {\n    public:\n        LeftPanel(wxPanel* parent);\n    \n        void OnPlus(wxCommandEvent& event);\n        void OnMinus(wxCommandEvent& event);\n    \n    private:\n        wxButton *m_plus;\n        wxButton *m_minus;\n        wxPanel* m_parent;\n        int count;\n    };\n    \n    \n    #endif //WIDGETSCOMMUNICATE_LEFTPANEL_H\n    \n    /*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　\n    \nLeftPanel.cpp\n    \n    \n    #include \"LeftPanel.h\"\n    #include \"Communicate.h\"\n    \n    enum {\n        ID_PLUS = 101,\n        ID_MINUS\n    };\n    \n    LeftPanel::LeftPanel(wxPanel *parent)\n        :wxPanel(parent, -1, wxPoint(-1, -1), wxSize(-1, -1), wxBORDER_SUNKEN)\n    {\n        count = 0;\n        m_parent = parent;\n        m_plus = new wxButton(this, ID_PLUS, wxT(\"+\"), wxPoint(10, 10));\n        m_minus = new wxButton(this, ID_MINUS, wxT(\"-\"), wxPoint(10, 60));\n    \n        Connect(ID_PLUS, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LeftPanel::OnPlus));\n        Connect(ID_MINUS, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LeftPanel::OnMinus));\n    \n    }\n    \n    void LeftPanel::OnPlus(wxCommandEvent &event) {\n        Communicate* comm = static_cast<Communicate*>(m_parent->GetParent());\n        if (comm) {\n            count++;\n            comm->SetString(wxString::Format(wxT(\"%d\"), count));\n        }\n    }\n    \n    void LeftPanel::OnMinus(wxCommandEvent &event) {\n    \n        Communicate* comm = static_cast<Communicate*>(m_parent->GetParent());\n        if (comm) {\n            count--;\n            comm->SetString(wxString::Format(wxT(\"%d\"), count));\n        }\n    }\n    \n /*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　\nRightPanel.h\n    \n    #ifndef WIDGETSCOMMUNICATE_RIGHTPANEL_H\n    #define WIDGETSCOMMUNICATE_RIGHTPANEL_H\n    \n    #include <wx/wx.h>\n    \n    class RightPanel : public wxPanel {\n    public:\n        RightPanel(wxPanel* parent);\n        void SetString(const wxString& str);\n    private:\n        wxStaticText* m_text;\n    \n    };\n    \n    \n    #endif //WIDGETSCOMMUNICATE_RIGHTPANEL_H\n    \n /*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　  \nRightPanel.cpp\n    \n    #include \"RightPanel.h\"\n    \n    RightPanel::RightPanel(wxPanel *parent)\n        :wxPanel(parent, wxID_ANY, wxDefaultPosition, wxSize(270, 150), wxBORDER_SUNKEN)\n    {\n        m_text = new wxStaticText(this, -1, wxT(\"0\"), wxPoint(40, 60));\n    }\n    \n    void RightPanel::SetString(const wxString &str) {\n        m_text->SetLabel(str);\n    }\n    \n    \n /*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　 \nCommunicate.h\n    \n    #ifndef WIDGETSCOMMUNICATE_COMMUNICATE_H\n    #define WIDGETSCOMMUNICATE_COMMUNICATE_H\n    \n    #include <wx/wx.h>\n    #include \"LeftPanel.h\"\n    #include \"RightPanel.h\"\n    \n    class Communicate : public wxFrame {\n    public:\n        Communicate(const wxString& title);\n        void SetString(const wxString& str);\n    \n    private:\n        LeftPanel* m_lp;\n        RightPanel* m_rp;\n        wxPanel* m_parent;\n    };\n    \n    \n    #endif //WIDGETSCOMMUNICATE_COMMUNICATE_H\n/*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　    \n    \nCommunicate.cpp\n    \n    \n    #include \"Communicate.h\"\n    \n    Communicate::Communicate(const wxString &title)\n        :wxFrame(nullptr, wxID_ANY, title, wxDefaultPosition, wxSize(290, 150))\n    {\n        m_parent = new wxPanel(this, wxID_ANY);\n    \n        m_lp = new LeftPanel(m_parent);\n        m_rp = new RightPanel(m_parent);\n    \n        wxBoxSizer* hbox = new wxBoxSizer(wxHORIZONTAL);\n        hbox->Add(m_lp, 1, wxEXPAND | wxALL, 5);\n        hbox->Add(m_rp, 1, wxEXPAND | wxALL, 5);\n    \n        m_parent->SetSizer(hbox);\n    \n        this->Center();\n    }\n    \n    void Communicate::SetString(const wxString &str) {\n        m_rp->SetString(str);\n    }\n/*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　    \n    \nMyApp.h\n    \n    #ifndef WIDGETSCOMMUNICATE_MYAPP_H\n    #define WIDGETSCOMMUNICATE_MYAPP_H\n    \n    #include \"wx/wx.h\"\n    \n    class MyApp : public wxApp {\n    public:\n        virtual bool OnInit();\n    };\n    \n    \n    #endif //WIDGETSCOMMUNICATE_MYAPP_H\n/*------------------------------------------------------------------------------------------------------------------*/\n\n\n/*------------------------------------------------------------------------------------------------------------------*/　　　    \n    \nMyApp.cpp\n    \n    #include \"MyApp.h\"\n    #include \"Communicate.h\"\n    \n    wxIMPLEMENT_APP(MyApp);\n    \n    bool MyApp::OnInit() {\n        Communicate* comm = new Communicate(wxT(\"Widgets communicate\"));\n        comm->Show(true);\n    \n        return true;\n    }\n    \n\n\n我们来谈谈移动事件。移动事件保存了关于移动更改事件的信息。当我们将窗口移动到一个新的位置时，将生成一个移动事件。表示移动事件的类是wxMoveEvent; 类型是: wxEVT_MOVE。\n\n\n事件传播\n\n事件有两种类型:基本事件和命令事件。它们的传播方式不同。事件传播是指事件从子部件传播到父部件和祖父部件等等。基本事件不会传播。命令事件会传播。例如，wxCloseEvent是一个基本事件。将此事件传播到父部件没有意义。\n\n默认情况下，在事件处理程序中捕获的事件将停止传播。要继续传播，必须调用Skip方法。\n\n\n\n\n\n\n\n\n\n\n\n\n","_id":"22"}