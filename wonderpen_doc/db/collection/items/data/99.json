{"id":"01hdmhbmnntrpxq3r0fze83het","add_time_ms":1698275119798,"icon":"book","type":"doc","title":"CMAKE各变量含义","_id":"99","char_count":{"word":1165,"char_without_spaces":2631,"char_with_spaces":2810,"char_all":2916},"content":"一 常用内置变量\n1. 学习'内置变量'的目的,你要知道'你在哪'?才能知道下一步要'干什么'?\n2.\n3. +++++++++++'PROJECT开头'+++++++++++\n4.\n5. (1) PROJECT_NAME: '工程名' -->当前'CMakeList.txt里'设置的project_name\n6.\n7. (2) PROJECT_'SOURCE'_DIR: 当前工程的'顶级'目录 -->根'CMakeLists.txt' 所在的路径\n8.\n9. (3) PROJECT_'BINARY'_DIR: 工程的'构建'目录 -->'out of build -->build目录';'out of inner-->根目录'\n10.\n11. +++++++++++'CMAKE开头'+++++++++++\n12.\n13. (1) CMAKE_CURRENT_SOURCE_DIR: '当前正处理'的源码路径 --> 当前'CMakeLists.txt' 所在的路径\n14.\n15. (2) CMAKE_CURRENT_BINARY_DIR: 当前正在处理的'构建目录'\n16.\n17. 备注： 每个由'add_subdirectory添加'的目录将会在'构建树(Build Tree)'中创建一个'构建目录'\n18.\n19. 补充： 对于直接在'源码目录中编译'的情况,当前正在处理的构建目录就是'当前源码'所在的目录-->'基本不会'\n20.\n21. (3) CMAKE_CURRENT_LIST_DIR: 当前处理的'cmake文件'所在的目录\n22.\n23. 备注：这里的cmake文件可能是'.camke'文件或'CMakeListst.txt'文件\n24.\n25. (4) CMAKE_CURRENT_LIST_FILE: 当前处理的'CMakeLists.txt或cmake'文件的全路径\n26.\n27. (5) CMAKE_CURRENT_LIST_LINE: 当前处理的'CMakeLists.txt或cmake'文件的'行号'-->'定位报错'\n28.\n29. (6) CMAKE_PROJECT_NAME: '整个项目'配置的project_name\n30.\n31. +++++++++++'OUTPUT中间'+++++++++++\n32.\n33. 'LIBRARY'_OUTPUT_DIR、'BINARY'_OUTPUT_DIR：'库'和'可执行'的最终存放目录\n二 概念理解\n（1）树结构\n1. 1) Source Tree -->'源码树'结构\n2.\n3. 2) Build Tree   -->'构建树'目录  \n4.\n5. 备注： 基于'Source Tree'编译构建得到'Build Tree'\n6.\n7. 3) Install Tree -->'安装树'结构-->最终要'安装到系统'的内容-->'make install'对应的操作\n（2）内编译和外部编译\n1. 1）in-source编译 -->'直接在项目根目录'\n2.\n3. 2）'out-of'-souce编译 -->'项目根目录下创建build目录',防止'Build Tree'和'Source Tree'交叉污染,并且cmake出错,可以直接'rm -fr ./build/*'清除干净\n三 实践\n说明： 以下实验都是在'out of source'的'build'目录下构建\n（1）CMAKE_SOURCE_DIR、CMAKE_BINARY_DIR\ncmake(三十六)Cmake常用变量的解读\n（2）CURRENT相关\nCMAKE_CURRENT_BINARY_DIR\n1. +++++++++'CMAKE_CURRENT_SOURCE_DIR'+++++++++\n2.\n3. 1）如果是 in-source 编译,它跟 CMAKE_CURRENT_SOURCE_DIR 一致\n4.\n5. 2）如果是 out-of-source 编译,他指的是 'target 编译目录'\n6.\n7. 备注： 使用 ADD_SUBDIRECTORY(src bin) 可以'更改'这个变量的值\n（3）CMAKE_CURRENT_LIST_DIR\n（4）set设置cache和环境变量设置\n① CMakeCache.txt\n1. 1) 可以将其想象成一个'配置文件'\n2.\n3. 备注： 在'Unix|Linux'环境下，我们可以认为它'等价于'传递给configure的'参数'\n4.\n5. 2) 在bulid目录下的'CmakeCache.txt'这个文件会'缓存第一次'编译的文件的信息\n6.\n7. 3) 缓存目的,'加快'构建速度\n② 变量引入cmake的方式\n1. 1) CMakeLists.txt 中通过 set(... CACHE ...) '设置'的变量\n2.\n3. 2) CMakeLists.txt 中的 'option()' 提供的选项\n4.\n5. 3) CMakeLists.txt 中find_package() 等find命令'引入'变量\n6.\n7. 4) 命令行 cmake . -D := 命令行'定义'变量\n8.\n9. 备注：对应于命令行'-D 定义变量'、'-U 用来删除变量'\n③ set设置cache\n1. 1）使用CACHE的同时,要'设定'<type>和<docstring>,<type>可以理解为所存入'变量类型',<docstring>为'变量的描述'\n2.\n3. 2）CmakeCache.txt里面'定义'了一些默认的'高阶'变量\n1. 1）SET(var1 13)\n2.\n3. 变量 var1 '被设置'成 13;如果 var1 在cache中'已经存在'，该命令'不会覆盖(overwrite)' cache中的值\n4.\n5. 2）SET(var1 13 ... CACHE ...)\n6.\n7. 如果cache'存在'该变量,使用'cache中'变量;如果cache中'不存在',将该值'写入cache'\n8.\n9. 3）SET(var1 13 ... CACHE ... FORCE) -->'常见形式'\n10.\n11. 不论cache中是否存在,'始终使用'该值\n④ set设置和获取系统环境变量\n特点： 该变量只能在'cmake内部'使用,'不会影响'外界\n⑤ 工具系统变量\n⑥ CMAKE_MODULE_PATH\n1. set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n2.\n3. 说明：在'原有的基础上'添加路径\n（5）Install Tree相关\n1. 常见： 帮助文档、可执行文件、库(动态和静态)、脚本 -->'核心的'\n2.\n3. 说明： 对应'output'目录\n（6）CMAKE_MODULE_PATH 与 CMAKE_PREFIX_PATH","edit_time_ms":1698275192717,"snapshots":[{"id":"01hdp8x178xknw9n3j8xf5x2xv","item_id":"01hdmhbmnntrpxq3r0fze83het","add_time_ms":1698333361384,"hash":"afac4c4bdd8245b4affa82bbb31fc4f0","length":2916,"char_count_char_with_spaces":2810,"char_count_char_without_spaces":2631,"char_count_word":1165}]}