{"id":"01hd96sv2e9zsd2mk5zh3bf8z7","add_time_ms":1697894952014,"icon":"book","type":"doc","title":"安装与测试","_id":"78","content":"# 安装与测试\n\n现在我们开始给项目添加安装规则和测试支持.\n\n### 安装规则\n安装规则非常简单: 对于MathFunctions,我们希望安装库和头文件,对于应用,我们希望安装可执行文件和配置头.\n\n所以在`MathFunctions/CMakeLists.txt`的结尾我们添加:\n\n```CMake\ninstall(TARGETS MathFunctions DESTINATION lib)\ninstall(FILES MathFunctions.h DESTINATION include)\n```\n\n在顶层`CMakeLists.txt`的结尾添加:\n\n```CMake\ninstall(TARGETS Tutorial DESTINATION bin)\ninstall(FILES \"${PROJECT_BINARY_DIR}/TutorialConfig.h\"\n  DESTINATION include\n  )\n```\n\n这就是建立一个tutorial的基础本地安装所需要的全部内容.\n\n现在我们运行`cmake`或者`cmake-gui`来配置项目并构建.\n\n然后通过在命令行中运行`cmake`的`install`选项来执行安装步骤(3.15引入,早先版本必须使用make install).对于多配制工具,要记得使用`--config`来指定配置.如果使用IDE,直接构建`INSTALL`目标即可.这一步会安装适合的头文件,库和可执行文件:\n\n```Shell\ncamke --install .\n```\n\nCMake变量`CMAKE_INSTALL_PREFIX`用于确定文件安装的根目录.如果使用`cmake --install`命令,安装前驻可以被`--prefix`参数覆写:\n\n```Shell\ncmake --install . --prefix \"/home/myuser/installdir\"\n```\n\n浏览安装目录然后验证安装的Tutorial可以运行.\n\n### 测试支持\n\n接下来让我们测试我们的应用,在顶级`CMakeLists.txt`的结尾,我们可以打开测试功能然后加一些基本测试来验证安装正确.\n\n```CMake\nenable_testing()\n\n# does the application run\nadd_test(NAME Runs COMMAND Tutorial 25)\n\n# does the usage message work?\nadd_test(NAME Usage COMMAND Tutorial)\nset_tests_properties(Usage\n  PROPERTIES PASS_REGULAR_EXPRESSION \"Usage:.*number\"\n  )\n\n# define a function to simplify adding tests\nfunction(do_test target arg result)\n  add_test(NAME Comp${arg} COMMAND ${target} ${arg})\n  set_tests_properties(Comp${arg}\n    PROPERTIES PASS_REGULAR_EXPRESSION ${result}\n    )\nendfunction(do_test)\n\n# do a bunch of result based tests\ndo_test(Tutorial 4 \"4 is 2\")\ndo_test(Tutorial 9 \"9 is 3\")\ndo_test(Tutorial 5 \"5 is 2.236\")\ndo_test(Tutorial 7 \"7 is 2.645\")\ndo_test(Tutorial 25 \"25 is 5\")\ndo_test(Tutorial -25 \"-25 is [-nan|nan|0]\")\ndo_test(Tutorial 0.0001 \"0.0001 is 0.01\")\n```\n\n第一个测试简单验证了应用运行,没有段错误或其他崩溃发生.并有一个0返回值.这是CTest测试的基本格式.\n\n下一个测试使用了`PASS_REGULAR_EXPRESSION`测试属性来验证测试输出包含特定字符串.用于在参数输入数量不对时打印使用信息.\n\n最后,我们有一个叫做`do_test`的函数来运行应用并验证计算平方根的结果对于给定输出是正确的.对于每次`do_test`的调用,项目中就会被加入一个带有指定的名字,输入和期待结果的测试.\n\n重新构建应用然后进入二进制目录并运行`ctest`可执行文件:`ctest -N`和`ctest -VV`(译者注:注意是两个V).对于多配置生成器(例如Visual Studio),配置类型必须通过`-C <mode>`来指定.例如,如果想要在Debug模式下运行测试,则需要在构建目录下(而非Debug目录下)执行`ctest -C Debug -VV`.在同样的目录下,使用`-C Release`则可以以Release模式运行.或者也可以在IDE中构建`RUN_TESTS`目标.","edit_time_ms":1697895059799,"char_count":{"word":790,"char_without_spaces":1972,"char_with_spaces":2092,"char_all":2173},"snapshots":[{"id":"01hd9bryeh5aq8ahq9h1nfqye2","item_id":"01hd96sv2e9zsd2mk5zh3bf8z7","add_time_ms":1697900165585,"hash":"a8e972ddd26b798aa23b63385e4ded41","length":2173,"char_count_char_with_spaces":2092,"char_count_char_without_spaces":1972,"char_count_word":790}]}