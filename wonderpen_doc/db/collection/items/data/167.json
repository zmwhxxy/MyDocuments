{"id":"01hwf44kwn8sqv9gev7vbmw2yp","add_time_ms":1714199613333,"icon":"book","type":"doc","_id":"167","char_count":{"word":456,"char_without_spaces":904,"char_with_spaces":1028,"char_all":1060},"title":"skynet.socket.listen","content":"在 Skynet 中，skynet.socket.listen(address, port) 函数用于创建一个监听指定地址和端口的服务器套接字，并返回该套接字的句柄。这个函数允许 Skynet 服务作为服务器监听来自客户端的连接请求。\n\n以下是 skynet.socket.listen 函数的用法和一个简单的示例：\n\nlua\nCopy code\n-- 引入 Skynet 模块\nlocal skynet = require \"skynet\"\n\n-- Skynet 服务的入口函数\nskynet.start(function()\n    -- 创建一个监听地址为 \"127.0.0.1\"，端口为 8888 的服务器套接字\n    local server_socket = skynet.socket.listen(\"127.0.0.1\", 8888)\n    print(\"服务器套接字已创建\")\n\n    -- 开始监听指定的服务器套接字\n    skynet.socket.start(server_socket, function(id, addr)\n        print(\"客户端连接成功，客户端地址：\" .. addr)\n\n        -- 在客户端连接成功后，可以在这里处理与客户端的通信逻辑\n        -- 例如，向客户端发送欢迎消息\n        skynet.socket.write(id, \"欢迎连接到服务器\")\n\n        -- 处理客户端发送的数据\n        skynet.socket.bind(id)\n    end)\nend)\n在这个示例中：\n\nskynet.socket.listen(\"127.0.0.1\", 8888) 创建了一个监听地址为 \"127.0.0.1\"，端口为 8888 的服务器套接字，并将其句柄存储在 server_socket 变量中。\nskynet.socket.start(server_socket, function(id, addr) ... end) 开始监听指定的服务器套接字，并在有新的客户端连接时执行匿名函数。这个匿名函数接受两个参数：客户端套接字的句柄 id 和客户端地址 addr。\n在匿名函数中，可以处理客户端连接成功后的逻辑，例如向客户端发送欢迎消息，并绑定客户端套接字以便后续处理通信。\n这样，服务就能够通过 skynet.socket.listen 创建一个服务器套接字，并监听来自客户端的连接请求了。","edit_time_ms":1714199628325,"snapshots":[{"id":"01jdc8sms089px5hadgf70xv92","item_id":"01hwf44kwn8sqv9gev7vbmw2yp","add_time_ms":1732357444384,"hash":"a1b3702e9dd2121d6cd20b7e77444038","length":1060,"char_count_char_with_spaces":1028,"char_count_char_without_spaces":904,"char_count_word":456,"version_key":1}]}