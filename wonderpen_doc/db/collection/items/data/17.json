{"id":"01g8m5pmsrpbxknmvcdmrdrrts","add_time_ms":1658534449976,"icon":"book","type":"doc","title":"Event","_id":"17","content":"First programs in wxWidgets\nlast modified January 6, 2022\n\nIn this chapter, we will cover the basics needed to create wxWidgets applications. We will create our first simple example, show how to display an icon. Next we will create a simple example demonstrating usage of an event. Finally, we will see how widgets communicate in wxWidgets applications.\n\nA simple application\nFirst we create the very basic wxWidgets program.\n\nsimple.h\n#include <wx/wx.h>\n\nclass Simple : public wxFrame\n{\npublic:\n    Simple(const wxString& title);\n\n};\nsimple.cpp\n#include \"simple.h\"\n\nSimple::Simple(const wxString& title)\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(250, 150))\n{\n  Centre();\n}\nmain.h\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\n  public:\n    virtual bool OnInit();\n};\nmain.cpp\n#include \"main.h\"\n#include \"simple.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n{\n    Simple *simple = new Simple(wxT(\"Simple\"));\n    simple->Show(true);\n\n    return true;\n}\nThis very basic example shows a small window on the screen. The window is centered.\n\nCentre();\nThis method centers the window on the screen, both horizontally and vertically.\n\nIMPLEMENT_APP(MyApp)\nThe code that implements the application is hidden behind this macro. This is copy and paste code, we usually do not have to care about.\n\ng++ main.cpp main.h simple.cpp simple.h  `wx-config --cxxflags --libs` -o simple\n\nTo compile the example on Unix, run the above command.\n\nSimple\nFigure: Simple\nApplication icon\nIn this example, we provide an icon for our application. It became a standard to display a small icon in the upper left corner of the window. The icon is a graphical identity of the program.\n\nicon.h\n#include <wx/wx.h>\n\nclass Icon : public wxFrame\n{\npublic:\n    Icon(const wxString& title);\n\n};\nicon.cpp\n#include \"icon.h\"\n\nIcon::Icon(const wxString& title)\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(250, 150))\n{\n  SetIcon(wxIcon(wxT(\"web.xpm\")));\n  Centre();\n}\nmain.h\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\n  public:\n    virtual bool OnInit();\n};\n\nmain.cpp\n#include \"main.h\"\n#include \"icon.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n{\n    Icon *icon = new Icon(wxT(\"Icon\"));\n    icon->Show(true);\n\n    return true;\n}\nIn our example we show a small web icon.\n\nSetIcon(wxIcon(wxT(\"web.xpm\")));\nTo display an application icon is a matter of one code line. XPM (X PixMap) is an ASCII image format.\n\nIcon\nFigure: Icon\nA simple button\nIn the following example, we create a button on the frame widget. We will show, how to create a simple event handler.\n\nbutton.h\n#include <wx/wx.h>\n\nclass Button : public wxFrame\n{\npublic:\n    Button(const wxString& title);\n\n    void OnQuit(wxCommandEvent & event);\n};\nbutton.cpp\n#include \"button.h\"\n\nButton::Button(const wxString& title)\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(270, 150))\n{\n  wxPanel *panel = new wxPanel(this, wxID_ANY);\n\n  wxButton *button = new wxButton(panel, wxID_EXIT, wxT(\"Quit\"), \n      wxPoint(20, 20));\n  Connect(wxID_EXIT, wxEVT_COMMAND_BUTTON_CLICKED, \n      wxCommandEventHandler(Button::OnQuit));\n  button->SetFocus();\n  Centre();\n}\n\nvoid Button::OnQuit(wxCommandEvent & WXUNUSED(event))\n{\n    Close(true);\n}\nmain.h\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\n  public:\n    virtual bool OnInit();\n};\nmain.cpp\n#include \"main.h\"\n#include \"button.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n{\n\n    Button *btnapp = new Button(wxT(\"Button\"));\n    btnapp->Show(true);\n\n    return true;\n}\nwxPanel *panel = new wxPanel(this, wxID_ANY);\nFirst we create a wxPanel widget. It will be placed inside a wxFrame widget.\n\nwxButton *button = new wxButton(panel, wxID_EXIT, wxT(\"Quit\"), wxPoint(20, 20));\n\nWe create a wxButton widget. It is placed on the panel. We use the predefined wxID_EXIT id for the button. It will cause to display a small exit icon on the button. The label of the button is \"Quit\". The button is positioned manually at x=20, y=20 coordinates. The beginning of the coordinate system is at the upper left hand corner.\n\nConnect(wxID_EXIT, wxEVT_COMMAND_BUTTON_CLICKED, \n    wxCommandEventHandler(Button::OnQuit));\nIf we click on the button, a wxEVT_COMMAND_BUTTON_CLICKED event is generated. We connect the event to the OnQuit method of the Button class. So when we click on the button, the OnQuit method is called.\n\nbutton->SetFocus();\nWe set the keyboard focus to the button. So if we press the Enter key, the button is being clicked.\n\nClose(true);\nInside the OnQuit method, we call the Close method. This will terminate our application.\n\nButton\nFigure: Button\n\nWidgets communicate\nIt is important to know, how widgets can communicate in application. Follow the next example.\n\nPanels.h\n#include <wx/wx.h>\n#include <wx/panel.h>\n\nclass LeftPanel : public wxPanel\n{\npublic:\n    LeftPanel(wxPanel *parent);\n\n    void OnPlus(wxCommandEvent & event);\n    void OnMinus(wxCommandEvent & event);\n\n    wxButton *m_plus;\n    wxButton *m_minus;\n    wxPanel *m_parent;\n    int count;\n\n};\n\nclass RightPanel : public wxPanel\n{\npublic:\n    RightPanel(wxPanel *parent);\n\n    void OnSetText(wxCommandEvent & event);\n\n    wxStaticText *m_text;\n\n};\n\nconst int ID_PLUS = 101;\nconst int ID_MINUS = 102;\nPanels.cpp\n#include <wx/stattext.h>\n#include \"Communicate.h\"\n\nLeftPanel::LeftPanel(wxPanel * parent)\n       : wxPanel(parent, -1, wxPoint(-1, -1), wxSize(-1, -1), wxBORDER_SUNKEN)\n{\n  count = 0;\n  m_parent = parent;\n  m_plus = new wxButton(this, ID_PLUS, wxT(\"+\"), \n      wxPoint(10, 10));\n  m_minus = new wxButton(this, ID_MINUS, wxT(\"-\"), \n      wxPoint(10, 60));\n  Connect(ID_PLUS, wxEVT_COMMAND_BUTTON_CLICKED, \n      wxCommandEventHandler(LeftPanel::OnPlus));\n  Connect(ID_MINUS, wxEVT_COMMAND_BUTTON_CLICKED, \n      wxCommandEventHandler(LeftPanel::OnMinus));\n}\n\nvoid LeftPanel::OnPlus(wxCommandEvent & WXUNUSED(event))\n{\n  count++;\n\n  Communicate *comm = (Communicate *) m_parent->GetParent();\n  comm->m_rp->m_text->SetLabel(wxString::Format(wxT(\"%d\"), count));\n}\n\nvoid LeftPanel::OnMinus(wxCommandEvent & WXUNUSED(event))\n{\n  count--;\n\n  Communicate *comm = (Communicate *) m_parent->GetParent();\n  comm->m_rp->m_text->SetLabel(wxString::Format(wxT(\"%d\"), count));\n}\n\n\nRightPanel::RightPanel(wxPanel * parent)\n       : wxPanel(parent, wxID_ANY, wxDefaultPosition, \n         wxSize(270, 150), wxBORDER_SUNKEN)\n{\n    m_text = new wxStaticText(this, -1, wxT(\"0\"), wxPoint(40, 60));\n}\nCommunicate.h\n#include \"Panels.h\"\n#include <wx/wxprec.h>\n\n\nclass Communicate : public wxFrame\n{\npublic:\n    Communicate(const wxString& title);\n\n\n    LeftPanel *m_lp;\n    RightPanel *m_rp;\n    wxPanel *m_parent;\n\n};\nCommunicate.cpp\n#include \"Communicate.h\"\n\nCommunicate::Communicate(const wxString& title)\n       : wxFrame(NULL, wxID_ANY, title, wxDefaultPosition, wxSize(290, 150))\n{\n  m_parent = new wxPanel(this, wxID_ANY);\n\n  wxBoxSizer *hbox = new wxBoxSizer(wxHORIZONTAL);\n\n  m_lp = new LeftPanel(m_parent);\n  m_rp = new RightPanel(m_parent);\n\n  hbox->Add(m_lp, 1, wxEXPAND | wxALL, 5);\n  hbox->Add(m_rp, 1, wxEXPAND | wxALL, 5);\n\n  m_parent->SetSizer(hbox);\n\n  this->Centre();\n}\nmain.h\n#include <wx/wx.h>\n\nclass MyApp : public wxApp\n{\n  public:\n    virtual bool OnInit();\n};\nmain.cpp\n#include \"main.h\"\n#include \"Communicate.h\"\n\nIMPLEMENT_APP(MyApp)\n\nbool MyApp::OnInit()\n{\n\n    Communicate *communicate = new Communicate(wxT(\"Widgets communicate\"));\n    communicate->Show(true);\n\n    return true;\n}\nIn our example we have two panels. A left and right panel. The left panel has two buttons. The right panel has one static text. The buttons change the number displayed in the static text. The question is, how do we grab the pointer to the static text?\n\nm_parent = parent;\nHere we save the pointer to the parent widget of the LeftPanel. It is a wxPanel widget.\n\nCommunicate *comm = (Communicate *) m_parent->GetParent();\ncomm->m_rp->m_text->SetLabel(wxString::Format(wxT(\"%d\"), count));\nThese two lines are the most important lines of the example. It is shown, how we get access to the static text widget, which is placed on a different panel. First we get the parent of the both left and right panels. This parent widget has a pointer to the right panel. And the right panel has a pointer to the static text.\n\nWidgets communicate\nFigure: Widgets communicate\nIn this part of the wxWidgets tutorial, we have created some simple programs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","edit_time_ms":1658534657531,"snapshots":[]}