{"id":"01hd96m3mrzrwr6db02scqqxyr","add_time_ms":1697894764184,"icon":"book","type":"doc","title":"添加库","_id":"76","content":"## 添加库\n现在我们会向我们的项目中添加一个库.这个库会包含我们计算数字平方根的实现.可执行文件就可以使用库而非编译器提供的平方根函数.\n\n本篇教程里,我们会把库放在一个叫做`MathFunctions`的子文件夹下.这个目录已经包含了一个头文件`MathFunctions.h`,也包含了一个源文件`mysqrt.cxx`. 源文件中包含一个名为`mysqrt`的函数,提供了编译器中`sqrt`相近功能.\n\n向`MathFunctions`文件夹中新增下面的单行`CMakeLists.txt`文件:\n\n```CMake\nadd_library(MathFunctions mysqrt.cxx)\n```\n\n为了使用新的库,我们在顶级的`CMakeLists.txt`中加入`add_subdirectory()`来构建库.我们向可执行文件加入新的库,并将`MathFunctions`添加为包含目录,这样就可以查询得到`mqsqrt.h`头文件了.顶级`CMakeLists.txt`的最后几行应该如下:\n\n```CMake\n# add the MathFunctions library\nadd_subdirectory(MathFunctions)\n\n# add the executable\nadd_executable(Tutorial tutorial.cxx)\n\ntarget_link_libraries(Tutorial PUBLIC MathFunctions)\n\n# add the binary tree to the search path for include files\n# so that we will find TutorialConfig.h\ntarget_include_directories(Tutorial PUBLIC\n                          \"${PROJECT_BINARY_DIR}\"\n                          \"${PROJECT_SOURCE_DIR}/MathFunctions\"\n                          )\n```\n\n接下来我们让MathFunctions库可以作为可选项.尽管本次教程不需要这样,但大型项目中这很常见.第一步是在顶层`CMakeLists.txt`中增加选项:\n\n```CMake\noption(USE_MYMATH \"Use tutorial provided math implementation\" ON)\n\n# configure a header file to pass some of the CMake settings\n# to the source code\nconfigure_file(TutorialConfig.h.in TutorialConfig.h)\n```\n\n这一选项会在`cmake-gui`或`ccmake`中显示,默认值为ON,也可被用户修改.这一选项会被存储在缓存中,用户无需每次都设定.\n\n下一项更改是将MathFunctions库的构建和链接设定成可选的.我们在顶级`CMakeLists.txt`的结尾做如下修改:\n\n```CMake\nif(USE_MYMATH)\n  add_subdirectory(MathFunctions)\n  list(APPEND EXTRA_LIBS MathFunctions)\n  list(APPEND EXTRA_INCLUDES \"${PROJECT_SOURCE_DIR}/MathFunctions\")\nendif()\n\n# add the executable\nadd_executable(Tutorial tutorial.cxx)\n\ntarget_link_libraries(Tutorial PUBLIC ${EXTRA_LIBS})\n\n# add the binary tree to the search path for include files\n# so that we will find TutorialConfig.h\ntarget_include_directories(Tutorial PUBLIC\n                           \"${PROJECT_BINARY_DIR}\"\n                           ${EXTRA_INCLUDES}\n                           )\n```\n\n变量`EXTRA_LIBS`收集了之后可以在可执行文件中链接的可选库.变量`EXTRA_INCLUDES`也相应的用于收集可选的头文件.在处理很多可选项时,这是一种经典的处理方式.下一步我们会用新方式来做.\n\n相应的源代码改动就比较直接了.首先,在`tutorial.cxx`中,如果需要则包含`MathFunctions.h`:\n\n```C++\n#ifdef USE_MYMATH\n#  include \"MathFunctions.h\"\n#endif\n```\n\n然后在同一个文件中,让`USE_MYMATH`变量控制函数的选择:\n\n```C++\n#ifdef USE_MYMATH\n  const double outputValue = mysqrt(inputValue);\n#else\n  const double outputValue = sqrt(inputValue);\n#endif\n```\n\n因为现在源代码中需要`USE_MYMATH`变量,我们可以在`TutorialConfig.h.in`文件中加入下述这行:\n\n```C++\n#cmakedefine USE_MYMATH\n```\n\n**练习**: 为什么我们在选项`USE_MYMATH`后配置`TutorialConfig.h.in`.如果我们把这两条交换会发生什么.\n\n运行`cmake`或者`cmake-gui`来配置项目,然后构建,在运行构建出的可执行文件.\n\n现在让我们更新`USE_MYMATH`的值.最简单的方式是使用`cmake-gui`或终端中的`ccmake`.或者如果想在命令行中修改这一选项:\n\n```Shell\ncmake ../Step2 -DUSE_MYMATH=OFF\n```\n\n重新构建然后运行.\n\n哪个函数结果更好,sqrt还是mysqrt?\n\n","edit_time_ms":1697895031089,"char_count":{"word":814,"char_without_spaces":2340,"char_with_spaces":2607,"char_all":2711},"snapshots":[{"id":"01hd9brye9hvwxx33grrqhg0p2","item_id":"01hd96m3mrzrwr6db02scqqxyr","add_time_ms":1697900165577,"hash":"7bbff47c4572b715308f1edd5b202cd6","length":2711,"char_count_char_with_spaces":2607,"char_count_char_without_spaces":2340,"char_count_word":814}]}