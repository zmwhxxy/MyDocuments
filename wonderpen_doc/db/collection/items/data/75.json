{"id":"01hd96hxejt3eggzhynv5j0jsh","add_time_ms":1697894692306,"icon":"book","type":"doc","title":"基本出发点","_id":"75","content":"## 介绍\n这份渐进式的CMake教程覆盖了构建系统时CMake来处理的一些常见的问题.在一个样例项目中来探讨不同主题是如何结合应用是非常有助于理解的.教程文档和源码可以从CMake源路径下的`Help/guide/tutorial`文件夹中获得(译者注:已同步至当前Git).每一步都有其独立的子目录,这些子目录也包含可以作为出发点的代码.教程样例是循序渐进的,每一步都提供了前一步的完整解决方案.\n\n## Step1: 一个基本出发点\n最基础的项目是基于源代码的一个可执行构建.对于简单项目.三行的`CMakeLists.txt`就满足了全部需要的内容.这就是这篇教程的开始点.在`Step1`路径下创建一个`CMakeLists.txt`文件如下:  \n```CMake\ncmake_minimum_required(VERSION 3.10)\n\n# set the project name\nproject(Tutorial)\n\n# add the executable\nadd_executable(Tutorial tutorial.cxx)\n```\n\n注意在`CMakeLists.txt`文件中的命令都使用了小写.CMake支持大小写混用命令.`tutorial.cxx`的源代码在`Step1`文件夹下,可用以计算平方根.\n\n### 添加版本号 & 配置头文件\n首个添加的特性是给我们的项目和可执行文件提供版本号.尽管我们可以在源代码中添加版本号,但是使用`CMakeLists.txt`是更灵活的方式.\n\n首先,修改`CMakeLists.txt`,使用[`project()`](https://cmake.org/cmake/help/latest/command/project.html#command:project)命令来设定项目名和版本号.\n\n```CMake\ncmake_minimum_required(VERSION 3.10)\n\n# set the project name and version\nproject(Tutorial VERSION 1.0)\n```\n\n然后制定一个头文件来将版本号传递到源码里:\n\n```CMake\nconfigure_file(TutorialConfig.h.in TutorialConfig.h)\n```\n\n因为指定的文件会被写入二进制结构中,我们必须将这一目录添加到搜索include文件的列表中.在`CMakeLists.txt`文件结尾写入:\n\n```CMake\ntarget_include_directories(Tutorial PUBLIC\n                           \"${PROJECT_BINARY_DIR}\"\n                           )\n```\n\n使用你喜欢的IDE,在源路径下创建`TutorialConfig.h.in`,并写入下述内容:\n\n```C++\n// the configured options and settings for Tutorial\n#define Tutorial_VERSION_MAJOR @Tutorial_VERSION_MAJOR@\n#define Tutorial_VERSION_MINOR @Tutorial_VERSION_MINOR@\n```\n\n当CMake生成这个头文件时,`@Tutorial_VERSION_MAJOR@`和`@Tutorial_VERSION_MINOR@`的值会被自定替换.\n\n接下来调整`tutorial.cxx`来包含头文件`TutorialConfig.h`.\n\n最后,更新`tutorial.cxx`如下以打印可执行文件名和版本号:\n\n```C++\n    if (argc < 2) {\n    // report version\n    std::cout << argv[0] << \" Version \" << Tutorial_VERSION_MAJOR << \".\"\n                << Tutorial_VERSION_MINOR << std::endl;\n    std::cout << \"Usage: \" << argv[0] << \" number\" << std::endl;\n    return 1;\n    }\n```\n\n### 指定C++标准\n接下来,我们通过在`tutorial.cxx`中将`atof`替换为`std::stod`来给我们的项目增加一些C++11特性.同时,移除`#include <cstdlib>`.\n\n```C++\nconst double inputValue = std::stod(argv[1]);\n```\n\n我们需要在CMake代码中显式地声明以使用正确的配置.最简单的方式是在CMake中通过使用`CMAKE_CXX_STANDARD`以启用对特定版本C++标准的支持.对于本篇教程.将`CMakeLists.txt`中的`CMAKE_CXX_STANDARD`设为11,`CMAKE_CXX_STANDARD_REQUIRED`设为`True`.并将`CMAKE_CXX_STANDARD`声明置于`add_executable`前.\n\n```CMake\ncmake_minimum_required(VERSION 3.10)\n\n# set the project name and version\nproject(Tutorial VERSION 1.0)\n\n# specify the C++ standard\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n```\n\n### 构建与测试\n运行`cmake`可执行文件,或者`cmake-gui`来配置项目,然后使用所选的构建工具来构建它.\n\n例如,从命令行中,我们要进入`Help/guide/tutorial`目录下并建立一个build目录:\n\n```Shell\nmkdir Step1_build\n```\n\n之后,进入build目录,然后运行CMake来配置项目,并生成原生构建系统:\n\n```Shell\ncd Step1_build\ncmake ../Step1\n```\n\n然后调用这个构建系统来实际编译/链接项目:\n\n```Shell\ncmake --build .\n```\n\n最后,尝试用下述命令来使用新构建的`Tutorial`:\n\n```\nTutorial 4294967296\nTutorial 10\nTutorial\n```","edit_time_ms":1697895006653,"char_count":{"word":937,"char_without_spaces":2504,"char_with_spaces":2696,"char_all":2811},"snapshots":[{"id":"01hd9brye56z573e8fygxa68jj","item_id":"01hd96hxejt3eggzhynv5j0jsh","add_time_ms":1697900165573,"hash":"ddcc27a887ffc7841ac94126deaefb68","length":2811,"char_count_char_with_spaces":2696,"char_count_char_without_spaces":2504,"char_count_word":937}]}