{"id":"01hd8tz9gfexzgws50awft9n80","add_time_ms":1697882547727,"icon":"book","type":"doc","title":"2.添加库","_id":"74","char_count":{"word":442,"char_without_spaces":1053,"char_with_spaces":1202,"char_all":1248},"content":"#添加库\n##1.创建库\n \n在cmake中添加库，需要使用add_library（）命令，并指定参与构建的源文件。\n\n    我们可以组织，而不是将所有源文件放在一个目录中 我们的项目具有一个或多个子目录。在这种情况下，我们将创建一个 专门用于我们库的子目录。在这里，我们可以添加一个新文件和一个或多个源文件。在顶级文件中，我们将使用命令add_subdirectory()来来将子目录添加到顶级文件夹中CMakeLists.txt的构建中.\n\n代码示例:\n    #指定该CMakeLists.txt兼容的最低cmake版本号\n    cmake_minimum_required(VERSION 3.6 FATAL_ERROR)\n    \n    #指定项目名称为:utils\n    project(utils VERSION 1.0 LANGUAGES CXX)\n    \n    #搜寻当前CMakeLists.txt文件所在的目录下的所有源文件保存为列表_src\n    aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR} _src)\n    \n    #使用列表_src中的原文创建库文件utils\n    add_library(${PROJECT_NAME} ${_src})\n    \n    #将头文件的路径包含在库目标中,便于使用库的时候引用库的头文件.\n    #PUBlIC: 使用库的对象可以引用该路径\n    #PRIVATE: 引用路径只对库本身可见 \n    target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n\n\n\n\n\n##2.构建和运行\n\n创建库后，它将通过targe_include_directories（）和target_link_libraries（）连接到我们的可执行目标。\n\n    #指定cmake的最低兼容版本\n    cmake_minimum_required(VERSION 3.6)\n    \n    #指定要生成项目的名称和版本号 以及使用的编码语言\n    project(Tutorial VERSION 1.0 LANGUAGES CXX)\n    \n    #指定使用main.cpp源文件创建,可执行文件并命名为项目名(Tutorial)\n    add_executable(${PROJECT_NAME} main.cpp)\n    \n    #添加utlis目录并调用utils目录下的CMakeLists.txt文件生utlis库\n    add_subdirectory(utils)\n    \n    #链接库utils到项目Tutorial\n    target_link_libraries(${PROJECT_NAME} PUBLIC utils)","edit_time_ms":1697892660588,"snapshots":[]}