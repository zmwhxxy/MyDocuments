{"id":"01hwf4e72dbbc6eev9gh2wrsnn","add_time_ms":1714199927886,"icon":"book","type":"doc","title":"skynet.socket.read","_id":"169","char_count":{"word":479,"char_without_spaces":1009,"char_with_spaces":1255,"char_all":1296},"content":"\n在 Skynet 中，skynet.socket.read 函数用于从指定套接字读取数据，最多读取指定大小的字节数，并返回读取到的数据。\n\n以下是 skynet.socket.read 函数的用法和一个简单的示例：\n\nlua\nCopy code\n-- 引入 Skynet 模块\nlocal skynet = require \"skynet\"\n\n-- Skynet 服务的入口函数\nskynet.start(function()\n    -- 创建一个监听地址为 \"127.0.0.1\"，端口为 8888 的服务器套接字\n    local server_socket = skynet.socket.listen(\"127.0.0.1\", 8888)\n    print(\"服务器套接字已创建\")\n\n    -- 开始监听指定的服务器套接字\n    skynet.socket.start(server_socket, function(id, addr)\n        print(\"客户端连接成功，客户端地址：\" .. addr)\n\n        -- 在客户端连接成功后，可以在这里处理与客户端的通信逻辑\n        -- 例如，向客户端发送欢迎消息\n        skynet.socket.write(id, \"欢迎连接到服务器\")\n\n        -- 循环读取客户端发送的数据\n        while true do\n            local data = skynet.socket.read(id, 1024) -- 最多读取 1024 字节的数据\n            if data then\n                print(\"收到客户端消息：\" .. data)\n            else\n                print(\"客户端断开连接\")\n                break\n            end\n        end\n    end)\nend)\n在这个示例中：\n\nskynet.socket.listen(\"127.0.0.1\", 8888) 创建了一个监听地址为 \"127.0.0.1\"，端口为 8888 的服务器套接字，并将其句柄存储在 server_socket 变量中。\nskynet.socket.start(server_socket, function(id, addr) ... end) 开始监听指定的服务器套接字，并在有新的客户端连接时执行匿名函数。这个匿名函数接受两个参数：客户端套接字的句柄 id 和客户端地址 addr。\n在匿名函数中，通过 skynet.socket.read(id, 1024) 循环读取客户端发送的数据，最多读取 1024 字节的数据。如果客户端断开连接，skynet.socket.read 函数会返回 nil，此时可以退出循环。\n这样，服务就能够通过 skynet.socket.read 从客户端读取数据，实现与客户端的通信。","edit_time_ms":1714199939039}