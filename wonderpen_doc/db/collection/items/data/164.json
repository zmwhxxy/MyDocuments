{"id":"01hwf3j0n8sx2mh159cv2q5bqa","add_time_ms":1714199003816,"icon":"book","type":"doc","title":"skynet.send","_id":"164","char_count":{"word":366,"char_without_spaces":773,"char_with_spaces":863,"char_all":904},"content":"Skynet 是一个基于 Lua 的轻量级 actor 模型框架，用于构建可扩展的网络服务。skynet.send 函数用于在 Skynet 应用程序中进行组件间通信。它将消息发送到指定的目标服务。\n\nskynet.send 函数有两个必需的参数：目标服务的地址和要发送的消息。\n\n以下是一个简单的示例，演示了 skynet.send 的用法：\n\nlua\nCopy code\n-- 引入 Skynet 模块\nlocal skynet = require \"skynet\"\n\n-- Skynet 服务的入口函数\nskynet.start(function()\n    -- 注册当前服务，服务名为 \"service1\"\n    skynet.register(\"service1\")\n\n    -- 定义处理接收到的消息的函数\n    function skynet.dispatch(session, address, ...)\n        print(\"Service1 收到消息:\", ...)\n    end\nend)\n\n-- 创建一个新的服务\nskynet.newservice(\"service2\")\n\n-- 从 service2 发送消息到 service1\nskynet.send(\"service1\", \"来自 service2 的问候\")\n在这个示例中：\n\nService1 使用 skynet.register 注册为服务名为 \"service1\" 的服务。\n使用 skynet.dispatch 定义处理接收到的消息的函数。\n创建一个新的服务，Service2。\nService2 使用 skynet.send 向 Service1 发送一条消息。\n当 Service1 接收到消息时，它会将 \"Service1 收到消息: 来自 service2 的问候\" 打印到控制台上。\n\n需要注意的是，在 Skynet 中，服务间的通信是异步的。这意味着发送消息的服务不会等待接收方的响应。如果需要接收响应，可以考虑使用 skynet.call 而不是 skynet.send。\n\n\n\n\n\n","edit_time_ms":1714199018631,"snapshots":[{"id":"01jdc8smrr6apcdnawf7dn76wv","item_id":"01hwf3j0n8sx2mh159cv2q5bqa","add_time_ms":1732357444376,"hash":"c457ebfff46ed1cc29d8e2e8ecc791b6","length":904,"char_count_char_with_spaces":863,"char_count_char_without_spaces":773,"char_count_word":366,"version_key":1}]}