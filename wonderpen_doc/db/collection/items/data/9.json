{"id":"01g8dsj60acxpcr89qz2qccb3e","add_time_ms":1658320394250,"icon":"book","type":"doc","title":"主窗口程序","_id":"9","content":"现在让我们增强第一个示例，使其显示一个可以关闭的窗口。\n创建第二个示例的初始步骤与第一个示例相同。\n应用程序的主窗口通常由wxFrame类的派生类来实现.\n下面显示了HelloMainFrame应用程序主窗口的代码:\n\n文件: MainFrame.h\n\n    #ifndef _MAIN_FRAME_H_\n    #define _MAIN_FRAME_H_\n    \n    #include <wx/frame.h>\n    \n    class MainFrame : public wxFrame\n    {\n    public:\n        MainFrame(const wxString& title);\n    };\n    \n    #endif\n\n\n文件: MainFrame.cpp\n\n    #include \"MainFrame.h\"\n    \n    MainFrame::MainFrame(const wxString& title)\n        : wxFrame(NULL, wxID_ANY, title)\n    {\n    }\n\n然后我们修改OnInit()函数以创建并显示MainFrame的新实例。该文件如下所示。与HelloClion例子相同的行(除了简单的重命名为MainFrame)已被灰色显示。\n\n文件: MainFrameApp.h\n\n    #ifndef _MAIN_FRAME_APP_H_\n    #define _MAIN_FRAME_APP_H_\n    \n    #include <wx/app.h>\n    \n    class MainFrameApp : public wxApp\n    {\n    public:\n       virtual bool OnInit();\n    };\n    \n    #endif\n    \n\n文件: MainFrameApp.cpp\n\n    #include \"MainFrameApp.h\"\n    #include \"MainFrame.h\"\n    \n    wxIMPLEMENT_APP(MainFrameApp);\n    \n    bool MainFrameApp::OnInit()\n    {\n        MainFrame* frame = new MainFrame(\"MainFrame\");\n        frame->Show(true);\n        return true;\n    }\n\n如果我们编译并运行这个应用程序，将显示一个基本框架。它已经可以处理一些操作，如最小化，最大化或关闭框架。默认情况下，关闭应用程序的最后一帧也会关闭应用程序本身。\n\n\n\n\n\n\n\n\n","edit_time_ms":1658321755400,"snapshots":[],"char_count":{"word":301,"char_without_spaces":876,"char_with_spaces":1103}}