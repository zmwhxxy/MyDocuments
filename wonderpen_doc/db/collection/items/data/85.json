{"id":"01hd970qfskfc4dp7nhf8mtfc9","add_time_ms":1697895177721,"icon":"book","type":"doc","title":"增加导出配置","_id":"85","content":"## 增加导出配置\n在第四步中,我们为CMake增加了安装库和头文件的功能.在第七步我们增加了打包这些信息以便可以发布给给其他人的能力.\n\n下一步是增加必要信息使得其他的CMake项目可以使用我们的项目,无论是基于构建目录,本地安装还是作为软件包使用.\n\n第一步是更新我们的[`install(TARGETS)`](https://cmake.org/cmake/help/latest/command/install.html#command:install)命令来不仅仅指定`DESTINATION`也指定`EXPORT`.`EXPORT`关键字生成一个CMake文件,其中含有能够导入安装树中安装命令所列出的所有目标的代码.于是我们可以通过更新`MathFunctions/CMakeLists.txt`里的`install`命令来显式地导出(`EXPORT`)MathFunctions库:\n\n```CMake\nset(installable_libs MathFunctions tutorial_compiler_flags)\nif(TARGET SqrtLibrary)\n  list(APPEND installable_libs SqrtLibrary)\nendif()\ninstall(TARGETS ${installable_libs}\n        DESTINATION lib\n        EXPORT MathFunctionsTargets)\ninstall(FILES MathFunctions.h DESTINATION include)\n```\n\n现在我们已经导出了MathFunctions,我们也需要显式地安装生成的`MathFunctionsTargets.cmake`文件.这是通过在顶级`CMakeLists.txt`的底部添加:\n\n```CMake\ninstall(EXPORT MathFunctionsTargets\n  FILE MathFunctionsTargets.cmake\n  DESTINATION lib/cmake/MathFunctions\n)\n```\n\n这时应该试着运行CMake.如果设置都正确的话,CMake应该会报错如下:\n\n```\nTarget \"MathFunctions\" INTERFACE_INCLUDE_DIRECTORIES property contains\npath:\n\n  \"/Users/robert/Documents/CMakeClass/Tutorial/Step11/MathFunctions\"\n\nwhich is prefixed in the source directory.\n```\n\nCMake报错描述的是在生成导出信息期间,会导出内在绑定到当前设备的路径,在其他设备上可能无效.解决方案是更新MathFunctions的`target_include_directories()`,以明确在从构建目录使用和从安装包使用时需要不同的`INTERFACE`位置.这意味着MathFunctions的`target_include_directories()`调用应改为如下:\n\n```CMake\ntarget_include_directories(MathFunctions\n                           INTERFACE\n                            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n                            $<INSTALL_INTERFACE:include>\n                           )\n```\n\n这一项更新后,我们就可以重新运行CMake并验证不再有警告了.\n\n到这里,我们已经将CMake配置打包好了所需的目标信息.但是我们也仍然需要生成`MathFunctionsConfig.cmake`以使得CMake的`find_package()`能够找到我们的项目.所以我们继续在顶级项目下建立名为`Config.cmake.in`的文件并写入下述代码:\n\n```\n@PACKAGE_INIT@\n\ninclude ( \"${CMAKE_CURRENT_LIST_DIR}/MathFunctionsTargets.cmake\" )\n```\n\n然后为了正确配置安装这个文件.将下述内容写入顶级`CMakeLists.txt`的结尾:\n\n```CMake\ninstall(EXPORT MathFunctionsTargets\n  FILE MathFunctionsTargets.cmake\n  DESTINATION lib/cmake/MathFunctions\n)\n\ninclude(CMakePackageConfigHelpers)\n# generate the config file that is includes the exports\nconfigure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in\n  \"${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake\"\n  INSTALL_DESTINATION \"lib/cmake/example\"\n  NO_SET_AND_CHECK_MACRO\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO\n  )\n# generate the version file for the config file\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfigVersion.cmake\"\n  VERSION \"${Tutorial_VERSION_MAJOR}.${Tutorial_VERSION_MINOR}\"\n  COMPATIBILITY AnyNewerVersion\n)\n\n# install the configuration file\ninstall(FILES\n  ${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsConfig.cmake\n  DESTINATION lib/cmake/MathFunctions\n  )\n```\n\n这里,我们已经生成了一个可重定位的CMake配置并是可以在项目安装或者打包后使用的.如果我们想让我们的项目也能够在构建目录使用.我们只需要在顶级`CMakeLists.txt`的结尾添加下述内容:\n\n```CMake\nexport(EXPORT MathFunctionsTargets\n  FILE \"${CMAKE_CURRENT_BINARY_DIR}/MathFunctionsTargets.cmake\"\n)\n```\n\n有这一导出后,我们现在生成一个`Targets.cmake`,使得在构建目录里配置好的`MathFunctionsConfig.cmake`可以被其他项目使用而无需安装.","edit_time_ms":1697895213579,"char_count":{"word":744,"char_without_spaces":2757,"char_with_spaces":2977,"char_all":3073},"snapshots":[{"id":"01hd9bryfce4qmxspbc6hma5ca","item_id":"01hd970qfskfc4dp7nhf8mtfc9","add_time_ms":1697900165612,"hash":"0a263def749b0c2448e422331ba922d7","length":3073,"char_count_char_with_spaces":2977,"char_count_char_without_spaces":2757,"char_count_word":744}]}