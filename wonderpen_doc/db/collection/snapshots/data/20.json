{"id":"01gz65efd0ew2n2jbgy75dgq7g","item_id":"01germreah9vgagsg3hf5nj34g","add_time_ms":1682760482208,"hash":"60f4ba15dda265e3c7f502901be61600","full_content":"wxGridSizer\n\nwxGridSizer在二维表中布局小部件。表格中的每个单元格都有相同的大小。\n\nwxgridsize (int rows, int cols, int vgap, int hgap)\n在构造函数中，我们指定表中的行数和列数。以及细胞之间的垂直和水平空间。\n\n在我们的例子中，我们创建了一个计算器的骨架。这是wxGridSizer的一个完美例子。\n\n\ngridsizer.h\n\n    #ifndef GRIDSIZER_GRIDSIZER_H\n    #define GRIDSIZER_GRIDSIZER_H\n\n    #include \"wx/wx.h\"\n\n    class GridSizer : public wxFrame {\n    public:\n        GridSizer(const wxString& title);\n    \n        wxMenuBar* menubar;\n        wxMenu* file;\n        wxBoxSizer* sizer;\n        wxGridSizer* gs;\n        wxTextCtrl* display;\n    \n    };\n    \n    \n    #endif //GRIDSIZER_GRIDSIZER_H\n    \n    \ngridsizer.cpp\n    \n    #include \"gridsizer.h\"\n    \n    GridSizer::GridSizer(const wxString &title)\n        :wxFrame(nullptr, wxID_ANY, title, wxPoint(-1, -1), wxSize(270, 220))\n    {\n        file = new wxMenu;\n        menubar = new wxMenuBar;\n        menubar->Append(file, \"&File\");\n        this->SetMenuBar(menubar);\n    \n        sizer = new wxBoxSizer(wxVERTICAL);\n    \n        display = new wxTextCtrl(this, -1, wxT(\"\"), wxPoint(-1, -1), wxSize(-1, -1), wxTE_RIGHT);\n    \n        sizer->Add(display, 0, wxEXPAND | wxTOP | wxBOTTOM, 4);\n    \n        gs = new wxGridSizer(5, 4, 3, 3);\n    \n        gs->Add(new wxButton(this, -1, wxT(\"Cls\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"Bck\")), 0, wxEXPAND);\n        gs->Add(new wxStaticText(this, -1, wxT(\"\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"Close\")), 0, wxEXPAND);\n    \n        gs->Add(new wxButton(this, -1, wxT(\"7\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"8\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"9\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"/\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"4\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"5\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"6\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"*\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"1\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"2\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"3\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"-\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"0\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\".\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"=\")), 0, wxEXPAND);\n        gs->Add(new wxButton(this, -1, wxT(\"+\")), 0, wxEXPAND);\n    \n        sizer->Add(gs, 1, wxEXPAND);\n    \n        this->SetSizer(sizer);\n        this->SetMinSize(wxSize(270, 220));\n        this->SetMaxSize(wxSize(540, 440));\n        this->Center();\n    }\n    \n    \nmain.h\n\n    #ifndef GRIDSIZER_MAIN_H\n    #define GRIDSIZER_MAIN_H\n    \n    #include \"wx/wx.h\"\n    \n    class MyApp : public wxApp {\n        virtual bool OnInit();\n    };\n    \n    #endif //GRIDSIZER_MAIN_H\n    \n    \nmain.cpp\n \n       #include \"main.h\"\n    #include \"gridsizer.h\"\n    \n    wxIMPLEMENT_APP(MyApp);\n    \n    bool MyApp::OnInit() {\n        GridSizer *frame = new GridSizer(wxT(\"计算器\"));\n        frame->Show(true);\n    \n        return true;\n    }\n    \n    \n    \nCMakeLists.txt\n\n    cmake_minimum_required(VERSION 3.16)\n    \n    project(GridSizer)\n    \n    set(CMAKE_CXX_STANDARD 14)\n    \n    add_definitions(\n            -DwxMSVC_VERSION_AUTO=1\n            -DwxMSVC_VERSION_COMPAT=1\n            -DUNICODE=1\n    )\n    \n    include_directories(\n            $ENV{WXWIN}/include\n            $ENV{WXWIN}/lib/vc14x_lib/mswud\n    )\n    \n    link_directories(\n            $ENV{WXWIN}/lib/vc14x_lib\n    )\n    \n    add_executable(${PROJECT_NAME}\n            main.cpp main.h\n            gridsizer.cpp gridsizer.h)\n    \n    if (CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        set_property(\n                TARGET ${PROJECT_NAME} PROPERTY\n                WIN32_EXECUTABLE true\n        )\n    endif ()\n    \n    set_property(\n            TARGET ${PROJECT_NAME} PROPERTY\n            MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\"\n    )\n    \n    target_link_libraries(\n            ${PROJECT_NAME}\n            shlwapi.lib\n            version.lib\n            comctl32.lib\n            rpcrt4.lib\n            ws2_32.lib\n            wininet.lib\n            winmm.lib\n            wxmsw32ud_gl.lib\n            wxmsw32ud_stc.lib\n            wxmsw32ud_richtext.lib\n            wxmsw32ud_propgrid.lib\n            wxmsw32ud_ribbon.lib\n            wxmsw32ud_aui.lib\n            wxmsw32ud_xrc.lib\n            wxbase32ud_xml.lib\n            wxmsw32ud_qa.lib\n            wxmsw32ud_webview.lib\n            wxmsw32ud_html.lib\n            wxmsw32ud_media.lib\n            wxmsw32ud_adv.lib\n            wxmsw32ud_core.lib\n            wxbase32ud_net.lib\n            wxbase32ud.lib\n            wxscintillad.lib\n            wxexpatd.lib\n            wxtiffd.lib\n            wxjpegd.lib\n            wxpngd.lib\n            wxzlibd.lib\n            wxregexud.lib\n            wxmsw32u_gl.lib\n    )\n\n\n\n","_id":"20"}