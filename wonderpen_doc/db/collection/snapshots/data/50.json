{"id":"01hd9bryezm8ahnhnr2zrash0y","item_id":"01hd96zy98d1j4wy23ch32m7vq","add_time_ms":1697900165600,"hash":"3851666db25f2f137b4f9a6e975bdd33","full_content":"## 增加对Dashboard的支持\n添加对测试提交到仪表盘的支持是很简单的.我们在测试支持一步中已经给我们的项目定义了一系列测试.现在我们只需要运行这些测试并将他们提交到仪表盘上即可.为了包含仪表盘的支持,我们在顶级`CMakeLists.txt`里包含`CTest`模块.\n\n将\n\n```CMake\n# enable testing\nenable_testing()\n```\n\n替换为\n\n```CMake\n# enable dashboard scripting\ninclude(CTest)\n```\n\nCTest模块会自动调用`enable_testing()`,所以我们就可以从CMake文件里移除这一语句.\n\n我们也需要在顶级目录下(我们指定项目名和提交到面板的目录)建立一个`CTestConfig.cmake`文件.\n\n```CMake\nset(CTEST_PROJECT_NAME \"CMakeTutorial\")\nset(CTEST_NIGHTLY_START_TIME \"00:00:00 EST\")\n\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=CMakeTutorial\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n```\n\n`ctest`可执行文件会在运行时读取这个文件.可以运行`cmake`或者`cmake-gui`来配置项目但是不构建项目来建立一个简单的面板.切换到二进制树目录下然后运行:\n\n```Shell\nctest [-VV] -C Debug -D Experimental\n```\n\n或者在IDE中构建`Experimental`目标.\n\n`ctest`可执行文件会构建和测试项目并提交结果到Kitware的公共面板:[https://my.cdash.org/index.php?project=CMakeTutorial](https://my.cdash.org/index.php?project=CMakeTutorial).","_id":"50"}