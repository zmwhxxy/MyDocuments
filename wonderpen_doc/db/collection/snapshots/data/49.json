{"id":"01hd9bryexkdym273snttasbba","item_id":"01hd96zmnn337x1echmzxyyh9c","add_time_ms":1697900165597,"hash":"47cc6fe575b0b959479f796e2ab8a50d","full_content":"## 构建安装器.\n下一步,我们假定我们想要发布我们的项目,以便其他人可以使用我们的项目.我们想在多种平台上发布二进制和源代码.这和我们在第四步里所做的有所不同.第四步里我们安装的是从源代码构建的二进制.在本例中,我们会构建支持二进制安装和包管理特性的安装包.为此,我们会使用CPack来生成对应平台的安装器.具体而言,我们需要在我们顶级的`CMakeLists.txt`底添加几行:\n\n```CMake\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/License.txt\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${Tutorial_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${Tutorial_VERSION_MINOR}\")\ninclude(CPack)\n```\n\n就这样就可以.我们通过包含[InstallRequiredSystemLibraries](https://cmake.org/cmake/help/latest/module/InstallRequiredSystemLibraries.html#module:InstallRequiredSystemLibraries)来开始.这一模块会包含任何项目所需的当前平台的运行库.下一步我们设定一些CPack变量到我们存储项目许可和版本信息的位置.版本信息早先在本篇教程里设定好了.`license.txt`在这一步被包含在顶级源目录中.\n\n最后,我们包含[CPack module](https://cmake.org/cmake/help/latest/module/CPack.html#module:CPack).CPack模块会使用这些变量和当前系统的其他变量来配置安装器.\n\n下一步是和正常一样构建项目然后运行[cpack](https://cmake.org/cmake/help/latest/manual/cpack.1.html#manual:cpack(1))可执行文件.从binary目录下运行以下命令以构建二进制发布:\n\n```Shell\ncpack\n```\n\n为了指定生成器,使用`-G`选项,对于多配置构建,使用`-C`来指定配置,例如:\n\n```Shell\ncpack -G ZIP -C Debug\n```\n\n为了构建一个源代码发布,可以使用:\n\n```Shell\ncpack --config CPackSourceConfig.cmake\n```\n\n或者运行`make package`,或者在IDE中右键`Package`目录然后`Build Project`.\n\n运行在二进制文件夹中的安装器,然后运行安装的可执行文件并验证可以运行.","_id":"49"}