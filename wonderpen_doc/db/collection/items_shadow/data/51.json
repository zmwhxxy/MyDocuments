{"id":"01hwagfkpz2gff6dh85k6hy30a","add_time_ms":1714044784351,"type":"doc","_id":"51","char_count":{"word":631,"char_without_spaces":2638,"char_with_spaces":2773,"char_all":2844},"title":"skynet-API文档","content":"\nskynet模块：\nskynet.start(func): 启动 Skynet 服务，并执行指定的函数。说明： 启动 Skynet 服务，并在启动后执行指定的函数。示例代码：\nlua\n---------------------------------------------------------------------------\nskynet.start(function()\n    print(\"Skynet service started\")\nend)\nskynet.abort(): 终止当前 Skynet 服务的运行。说明： 终止当前 Skynet 服务的运行。示例代码：\nlua\n---------------------------------------------------------------------------\nskynet.abort()\nskynet.error(...): 输出错误信息到控制台。说明： 输出错误信息到控制台。示例代码：\nlua\n---------------------------------------------------------------------------\nskynet.error(\"An error occurred\")\nskynet.send(addr, typename, ...): 向指定地址发送消息。说明： 向指定地址发送消息。示例代码：\nlua\n---------------------------------------------------------------------------\nskynet.send(service_address, \"lua\", \"hello\", \"world\")\nskynet.call(addr, typename, ...): 向指定地址发送消息，并等待返回结果。说明： 向指定地址发送消息，并等待返回结果。示例代码：\nlua\n---------------------------------------------------------------------------\nlocal result = skynet.call(service_address, \"lua\", \"get_data\")\nskynet.timeout(time, func): 在指定时间后执行指定的函数。说明： 在指定时间后执行指定的函数。示例代码：\nlua\n---------------------------------------------------------------------------\nskynet.timeout(1000, function()\n    print(\"One second later\")\nend)\nskynet.retpack(...): 将指定的数据打包成返回值。说明： 将指定的数据打包成返回值。示例代码：\nlua\n---------------------------------------------------------------------------\nreturn skynet.retpack(\"result1\", \"result2\")\nsocket模块：\nsocket.listen(addr): 创建一个监听套接字，并绑定到指定地址。说明： 创建一个监听套接字，并绑定到指定地址。示例代码：\nlua\n---------------------------------------------------------------------------\nlocal listen_socket = socket.listen(\"0.0.0.0:8888\")\nsocket.start(id, callback): 开始监听指定套接字，并设置接收数据时的回调函数。说明： 开始监听指定套接字，并设置接收数据时的回调函数。示例代码：\nlua\n---------------------------------------------------------------------------\nsocket.start(listen_socket, function(id, data)\n    print(\"Received data:\", data)\nend)\nsocket.write(id, data): 向指定套接字写入数据。说明： 向指定套接字写入数据。示例代码：\nlua\n---------------------------------------------------------------------------\nsocket.write(client_socket, \"Hello, Skynet!\")\nsocket.close(id): 关闭指定套接字。说明： 关闭指定套接字。示例代码：\nlua\n---------------------------------------------------------------------------\nsocket.close(client_socket)\nmysql模块：\nmysql.connect(config): 连接到 MySQL 数据库。说明： 连接到 MySQL 数据库。示例代码：\nlua\n---------------------------------------------------------------------------\nlocal db = mysql.connect{\n    host = \"127.0.0.1\",\n    port = 3306,\n    database = \"test\",\n    user = \"root\",\n    password = \"\",\n}\nmysql.query(sql): 执行指定的 SQL 查询语句。说明： 执行指定的 SQL 查询语句。示例代码：\nlua\n---------------------------------------------------------------------------\nlocal result = db:query(\"SELECT * FROM users\")\nmysql.escape_string(str): 对字符串进行转义，防止 SQL 注入攻击。说明： 对字符串进行转义，防止 SQL 注入攻击。示例代码：\nlua\n---------------------------------------------------------------------------\nlocal escaped_str = mysql.escape_string(\"user_input\")","edit_time_ms":1714044920581,"icon":"book"}